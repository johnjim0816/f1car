// Generated by gencpp from file acl_msgs/GPparams.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_GPPARAMS_H
#define ACL_MSGS_MESSAGE_GPPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace acl_msgs
{
template <class ContainerAllocator>
struct GPparams_
{
  typedef GPparams_<ContainerAllocator> Type;

  GPparams_()
    : input()
    , beta()
    , iL2()  {
    }
  GPparams_(const ContainerAllocator& _alloc)
    : input(_alloc)
    , beta(_alloc)
    , iL2(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _input_type;
  _input_type input;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _beta_type;
  _beta_type beta;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _iL2_type;
  _iL2_type iL2;





  typedef boost::shared_ptr< ::acl_msgs::GPparams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::GPparams_<ContainerAllocator> const> ConstPtr;

}; // struct GPparams_

typedef ::acl_msgs::GPparams_<std::allocator<void> > GPparams;

typedef boost::shared_ptr< ::acl_msgs::GPparams > GPparamsPtr;
typedef boost::shared_ptr< ::acl_msgs::GPparams const> GPparamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::GPparams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::GPparams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::GPparams_<ContainerAllocator1> & lhs, const ::acl_msgs::GPparams_<ContainerAllocator2> & rhs)
{
  return lhs.input == rhs.input &&
    lhs.beta == rhs.beta &&
    lhs.iL2 == rhs.iL2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::GPparams_<ContainerAllocator1> & lhs, const ::acl_msgs::GPparams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::GPparams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::GPparams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::GPparams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::GPparams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::GPparams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::GPparams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::GPparams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e690124aefed3e4ccb198c08430e0e06";
  }

  static const char* value(const ::acl_msgs::GPparams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe690124aefed3e4cULL;
  static const uint64_t static_value2 = 0xcb198c08430e0e06ULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::GPparams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/GPparams";
  }

  static const char* value(const ::acl_msgs::GPparams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::GPparams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] input\n"
"float64[] beta\n"
"float64[] iL2\n"
;
  }

  static const char* value(const ::acl_msgs::GPparams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::GPparams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input);
      stream.next(m.beta);
      stream.next(m.iL2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPparams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::GPparams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::GPparams_<ContainerAllocator>& v)
  {
    s << indent << "input[]" << std::endl;
    for (size_t i = 0; i < v.input.size(); ++i)
    {
      s << indent << "  input[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.input[i]);
    }
    s << indent << "beta[]" << std::endl;
    for (size_t i = 0; i < v.beta.size(); ++i)
    {
      s << indent << "  beta[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.beta[i]);
    }
    s << indent << "iL2[]" << std::endl;
    for (size_t i = 0; i < v.iL2.size(); ++i)
    {
      s << indent << "  iL2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.iL2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_GPPARAMS_H
