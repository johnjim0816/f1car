// Generated by gencpp from file acl_msgs/RunStepRequest.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_RUNSTEPREQUEST_H
#define ACL_MSGS_MESSAGE_RUNSTEPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <acl_msgs/CarState.h>

namespace acl_msgs
{
template <class ContainerAllocator>
struct RunStepRequest_
{
  typedef RunStepRequest_<ContainerAllocator> Type;

  RunStepRequest_()
    : startState()
    , dt(0.0)
    , omegaDes(0.0)
    , turn(0.0)
    , showVis(false)  {
    }
  RunStepRequest_(const ContainerAllocator& _alloc)
    : startState(_alloc)
    , dt(0.0)
    , omegaDes(0.0)
    , turn(0.0)
    , showVis(false)  {
  (void)_alloc;
    }



   typedef  ::acl_msgs::CarState_<ContainerAllocator>  _startState_type;
  _startState_type startState;

   typedef double _dt_type;
  _dt_type dt;

   typedef double _omegaDes_type;
  _omegaDes_type omegaDes;

   typedef double _turn_type;
  _turn_type turn;

   typedef uint8_t _showVis_type;
  _showVis_type showVis;





  typedef boost::shared_ptr< ::acl_msgs::RunStepRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::RunStepRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RunStepRequest_

typedef ::acl_msgs::RunStepRequest_<std::allocator<void> > RunStepRequest;

typedef boost::shared_ptr< ::acl_msgs::RunStepRequest > RunStepRequestPtr;
typedef boost::shared_ptr< ::acl_msgs::RunStepRequest const> RunStepRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::RunStepRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::RunStepRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::RunStepRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::RunStepRequest_<ContainerAllocator2> & rhs)
{
  return lhs.startState == rhs.startState &&
    lhs.dt == rhs.dt &&
    lhs.omegaDes == rhs.omegaDes &&
    lhs.turn == rhs.turn &&
    lhs.showVis == rhs.showVis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::RunStepRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::RunStepRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::RunStepRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::RunStepRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::RunStepRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::RunStepRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::RunStepRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::RunStepRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::RunStepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f634abab07f1c51e2876bb6e2831ae17";
  }

  static const char* value(const ::acl_msgs::RunStepRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf634abab07f1c51eULL;
  static const uint64_t static_value2 = 0x2876bb6e2831ae17ULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::RunStepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/RunStepRequest";
  }

  static const char* value(const ::acl_msgs::RunStepRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::RunStepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/CarState startState\n"
"float64 dt\n"
"float64 omegaDes\n"
"float64 turn\n"
"bool showVis\n"
"\n"
"================================================================================\n"
"MSG: acl_msgs/CarState\n"
"Header header\n"
"geometry_msgs/Pose pose\n"
"float64 Vx\n"
"float64 Vy\n"
"float64 r\n"
"float64 omegaF\n"
"float64 omegaR\n"
"float64 throttle\n"
"float64 turn\n"
"float64 x_center\n"
"float64 y_center\n"
"float64 R\n"
"float64 f_FLx\n"
"float64 f_FLy\n"
"float64 f_FLz\n"
"float64 f_FRx\n"
"float64 f_FRy\n"
"float64 f_FRz\n"
"float64 f_RLx\n"
"float64 f_RLy\n"
"float64 f_RLz\n"
"float64 f_RRx\n"
"float64 f_RRy\n"
"float64 f_RRz\n"
"float64 ax\n"
"float64 ay\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::acl_msgs::RunStepRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::RunStepRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.startState);
      stream.next(m.dt);
      stream.next(m.omegaDes);
      stream.next(m.turn);
      stream.next(m.showVis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RunStepRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::RunStepRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::RunStepRequest_<ContainerAllocator>& v)
  {
    s << indent << "startState: ";
    s << std::endl;
    Printer< ::acl_msgs::CarState_<ContainerAllocator> >::stream(s, indent + "  ", v.startState);
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "omegaDes: ";
    Printer<double>::stream(s, indent + "  ", v.omegaDes);
    s << indent << "turn: ";
    Printer<double>::stream(s, indent + "  ", v.turn);
    s << indent << "showVis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.showVis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_RUNSTEPREQUEST_H
