// Generated by gencpp from file acl_msgs/SingleTrackRequest.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_SINGLETRACKREQUEST_H
#define ACL_MSGS_MESSAGE_SINGLETRACKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace acl_msgs
{
template <class ContainerAllocator>
struct SingleTrackRequest_
{
  typedef SingleTrackRequest_<ContainerAllocator> Type;

  SingleTrackRequest_()
    : xcross(0.0)
    , t13(0.0)
    , t24(0.0)
    , num_laps(0)  {
    }
  SingleTrackRequest_(const ContainerAllocator& _alloc)
    : xcross(0.0)
    , t13(0.0)
    , t24(0.0)
    , num_laps(0)  {
  (void)_alloc;
    }



   typedef double _xcross_type;
  _xcross_type xcross;

   typedef double _t13_type;
  _t13_type t13;

   typedef double _t24_type;
  _t24_type t24;

   typedef int64_t _num_laps_type;
  _num_laps_type num_laps;





  typedef boost::shared_ptr< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SingleTrackRequest_

typedef ::acl_msgs::SingleTrackRequest_<std::allocator<void> > SingleTrackRequest;

typedef boost::shared_ptr< ::acl_msgs::SingleTrackRequest > SingleTrackRequestPtr;
typedef boost::shared_ptr< ::acl_msgs::SingleTrackRequest const> SingleTrackRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::SingleTrackRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::SingleTrackRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::SingleTrackRequest_<ContainerAllocator2> & rhs)
{
  return lhs.xcross == rhs.xcross &&
    lhs.t13 == rhs.t13 &&
    lhs.t24 == rhs.t24 &&
    lhs.num_laps == rhs.num_laps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::SingleTrackRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::SingleTrackRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c81f3f1f4acec1167034c36f9dc20a3";
  }

  static const char* value(const ::acl_msgs::SingleTrackRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c81f3f1f4acec11ULL;
  static const uint64_t static_value2 = 0x67034c36f9dc20a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/SingleTrackRequest";
  }

  static const char* value(const ::acl_msgs::SingleTrackRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 xcross\n"
"float64 t13\n"
"float64 t24\n"
"int64 num_laps\n"
;
  }

  static const char* value(const ::acl_msgs::SingleTrackRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xcross);
      stream.next(m.t13);
      stream.next(m.t24);
      stream.next(m.num_laps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SingleTrackRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::SingleTrackRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::SingleTrackRequest_<ContainerAllocator>& v)
  {
    s << indent << "xcross: ";
    Printer<double>::stream(s, indent + "  ", v.xcross);
    s << indent << "t13: ";
    Printer<double>::stream(s, indent + "  ", v.t13);
    s << indent << "t24: ";
    Printer<double>::stream(s, indent + "  ", v.t24);
    s << indent << "num_laps: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_laps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_SINGLETRACKREQUEST_H
