// Generated by gencpp from file acl_msgs/SimpleState.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_SIMPLESTATE_H
#define ACL_MSGS_MESSAGE_SIMPLESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace acl_msgs
{
template <class ContainerAllocator>
struct SimpleState_
{
  typedef SimpleState_<ContainerAllocator> Type;

  SimpleState_()
    : segment(0)
    , x(0.0)
    , y(0.0)
    , psi(0.0)
    , omega(0.0)
    , Vx(0.0)
    , Vy(0.0)
    , psidot(0.0)
    , slipping(0)
    , prev_radius(0.0)  {
    }
  SimpleState_(const ContainerAllocator& _alloc)
    : segment(0)
    , x(0.0)
    , y(0.0)
    , psi(0.0)
    , omega(0.0)
    , Vx(0.0)
    , Vy(0.0)
    , psidot(0.0)
    , slipping(0)
    , prev_radius(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _segment_type;
  _segment_type segment;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _psi_type;
  _psi_type psi;

   typedef double _omega_type;
  _omega_type omega;

   typedef double _Vx_type;
  _Vx_type Vx;

   typedef double _Vy_type;
  _Vy_type Vy;

   typedef double _psidot_type;
  _psidot_type psidot;

   typedef int64_t _slipping_type;
  _slipping_type slipping;

   typedef double _prev_radius_type;
  _prev_radius_type prev_radius;





  typedef boost::shared_ptr< ::acl_msgs::SimpleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::SimpleState_<ContainerAllocator> const> ConstPtr;

}; // struct SimpleState_

typedef ::acl_msgs::SimpleState_<std::allocator<void> > SimpleState;

typedef boost::shared_ptr< ::acl_msgs::SimpleState > SimpleStatePtr;
typedef boost::shared_ptr< ::acl_msgs::SimpleState const> SimpleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::SimpleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::SimpleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::SimpleState_<ContainerAllocator1> & lhs, const ::acl_msgs::SimpleState_<ContainerAllocator2> & rhs)
{
  return lhs.segment == rhs.segment &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.psi == rhs.psi &&
    lhs.omega == rhs.omega &&
    lhs.Vx == rhs.Vx &&
    lhs.Vy == rhs.Vy &&
    lhs.psidot == rhs.psidot &&
    lhs.slipping == rhs.slipping &&
    lhs.prev_radius == rhs.prev_radius;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::SimpleState_<ContainerAllocator1> & lhs, const ::acl_msgs::SimpleState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::SimpleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::SimpleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::SimpleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::SimpleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::SimpleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::SimpleState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::SimpleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfc3f29b7f63d9bfdd15aafee94b9fa1";
  }

  static const char* value(const ::acl_msgs::SimpleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfc3f29b7f63d9bfULL;
  static const uint64_t static_value2 = 0xdd15aafee94b9fa1ULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::SimpleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/SimpleState";
  }

  static const char* value(const ::acl_msgs::SimpleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::SimpleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 segment\n"
"float64 x\n"
"float64 y\n"
"float64 psi\n"
"float64 omega\n"
"float64 Vx\n"
"float64 Vy\n"
"float64 psidot\n"
"int64 slipping\n"
"float64 prev_radius\n"
;
  }

  static const char* value(const ::acl_msgs::SimpleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::SimpleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.segment);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.psi);
      stream.next(m.omega);
      stream.next(m.Vx);
      stream.next(m.Vy);
      stream.next(m.psidot);
      stream.next(m.slipping);
      stream.next(m.prev_radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimpleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::SimpleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::SimpleState_<ContainerAllocator>& v)
  {
    s << indent << "segment: ";
    Printer<int64_t>::stream(s, indent + "  ", v.segment);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
    s << indent << "omega: ";
    Printer<double>::stream(s, indent + "  ", v.omega);
    s << indent << "Vx: ";
    Printer<double>::stream(s, indent + "  ", v.Vx);
    s << indent << "Vy: ";
    Printer<double>::stream(s, indent + "  ", v.Vy);
    s << indent << "psidot: ";
    Printer<double>::stream(s, indent + "  ", v.psidot);
    s << indent << "slipping: ";
    Printer<int64_t>::stream(s, indent + "  ", v.slipping);
    s << indent << "prev_radius: ";
    Printer<double>::stream(s, indent + "  ", v.prev_radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_SIMPLESTATE_H
