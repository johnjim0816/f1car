// Generated by gencpp from file acl_msgs/CarState.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_CARSTATE_H
#define ACL_MSGS_MESSAGE_CARSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace acl_msgs
{
template <class ContainerAllocator>
struct CarState_
{
  typedef CarState_<ContainerAllocator> Type;

  CarState_()
    : header()
    , pose()
    , Vx(0.0)
    , Vy(0.0)
    , r(0.0)
    , omegaF(0.0)
    , omegaR(0.0)
    , throttle(0.0)
    , turn(0.0)
    , x_center(0.0)
    , y_center(0.0)
    , R(0.0)
    , f_FLx(0.0)
    , f_FLy(0.0)
    , f_FLz(0.0)
    , f_FRx(0.0)
    , f_FRy(0.0)
    , f_FRz(0.0)
    , f_RLx(0.0)
    , f_RLy(0.0)
    , f_RLz(0.0)
    , f_RRx(0.0)
    , f_RRy(0.0)
    , f_RRz(0.0)
    , ax(0.0)
    , ay(0.0)  {
    }
  CarState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose(_alloc)
    , Vx(0.0)
    , Vy(0.0)
    , r(0.0)
    , omegaF(0.0)
    , omegaR(0.0)
    , throttle(0.0)
    , turn(0.0)
    , x_center(0.0)
    , y_center(0.0)
    , R(0.0)
    , f_FLx(0.0)
    , f_FLy(0.0)
    , f_FLz(0.0)
    , f_FRx(0.0)
    , f_FRy(0.0)
    , f_FRz(0.0)
    , f_RLx(0.0)
    , f_RLy(0.0)
    , f_RLz(0.0)
    , f_RRx(0.0)
    , f_RRy(0.0)
    , f_RRz(0.0)
    , ax(0.0)
    , ay(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef double _Vx_type;
  _Vx_type Vx;

   typedef double _Vy_type;
  _Vy_type Vy;

   typedef double _r_type;
  _r_type r;

   typedef double _omegaF_type;
  _omegaF_type omegaF;

   typedef double _omegaR_type;
  _omegaR_type omegaR;

   typedef double _throttle_type;
  _throttle_type throttle;

   typedef double _turn_type;
  _turn_type turn;

   typedef double _x_center_type;
  _x_center_type x_center;

   typedef double _y_center_type;
  _y_center_type y_center;

   typedef double _R_type;
  _R_type R;

   typedef double _f_FLx_type;
  _f_FLx_type f_FLx;

   typedef double _f_FLy_type;
  _f_FLy_type f_FLy;

   typedef double _f_FLz_type;
  _f_FLz_type f_FLz;

   typedef double _f_FRx_type;
  _f_FRx_type f_FRx;

   typedef double _f_FRy_type;
  _f_FRy_type f_FRy;

   typedef double _f_FRz_type;
  _f_FRz_type f_FRz;

   typedef double _f_RLx_type;
  _f_RLx_type f_RLx;

   typedef double _f_RLy_type;
  _f_RLy_type f_RLy;

   typedef double _f_RLz_type;
  _f_RLz_type f_RLz;

   typedef double _f_RRx_type;
  _f_RRx_type f_RRx;

   typedef double _f_RRy_type;
  _f_RRy_type f_RRy;

   typedef double _f_RRz_type;
  _f_RRz_type f_RRz;

   typedef double _ax_type;
  _ax_type ax;

   typedef double _ay_type;
  _ay_type ay;





  typedef boost::shared_ptr< ::acl_msgs::CarState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::CarState_<ContainerAllocator> const> ConstPtr;

}; // struct CarState_

typedef ::acl_msgs::CarState_<std::allocator<void> > CarState;

typedef boost::shared_ptr< ::acl_msgs::CarState > CarStatePtr;
typedef boost::shared_ptr< ::acl_msgs::CarState const> CarStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::CarState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::CarState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::CarState_<ContainerAllocator1> & lhs, const ::acl_msgs::CarState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pose == rhs.pose &&
    lhs.Vx == rhs.Vx &&
    lhs.Vy == rhs.Vy &&
    lhs.r == rhs.r &&
    lhs.omegaF == rhs.omegaF &&
    lhs.omegaR == rhs.omegaR &&
    lhs.throttle == rhs.throttle &&
    lhs.turn == rhs.turn &&
    lhs.x_center == rhs.x_center &&
    lhs.y_center == rhs.y_center &&
    lhs.R == rhs.R &&
    lhs.f_FLx == rhs.f_FLx &&
    lhs.f_FLy == rhs.f_FLy &&
    lhs.f_FLz == rhs.f_FLz &&
    lhs.f_FRx == rhs.f_FRx &&
    lhs.f_FRy == rhs.f_FRy &&
    lhs.f_FRz == rhs.f_FRz &&
    lhs.f_RLx == rhs.f_RLx &&
    lhs.f_RLy == rhs.f_RLy &&
    lhs.f_RLz == rhs.f_RLz &&
    lhs.f_RRx == rhs.f_RRx &&
    lhs.f_RRy == rhs.f_RRy &&
    lhs.f_RRz == rhs.f_RRz &&
    lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::CarState_<ContainerAllocator1> & lhs, const ::acl_msgs::CarState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::CarState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::CarState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::CarState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::CarState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::CarState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::CarState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::CarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24e7939ba4db72b0c2b93d5f9545e13b";
  }

  static const char* value(const ::acl_msgs::CarState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24e7939ba4db72b0ULL;
  static const uint64_t static_value2 = 0xc2b93d5f9545e13bULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::CarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/CarState";
  }

  static const char* value(const ::acl_msgs::CarState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::CarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Pose pose\n"
"float64 Vx\n"
"float64 Vy\n"
"float64 r\n"
"float64 omegaF\n"
"float64 omegaR\n"
"float64 throttle\n"
"float64 turn\n"
"float64 x_center\n"
"float64 y_center\n"
"float64 R\n"
"float64 f_FLx\n"
"float64 f_FLy\n"
"float64 f_FLz\n"
"float64 f_FRx\n"
"float64 f_FRy\n"
"float64 f_FRz\n"
"float64 f_RLx\n"
"float64 f_RLy\n"
"float64 f_RLz\n"
"float64 f_RRx\n"
"float64 f_RRy\n"
"float64 f_RRz\n"
"float64 ax\n"
"float64 ay\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::acl_msgs::CarState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::CarState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose);
      stream.next(m.Vx);
      stream.next(m.Vy);
      stream.next(m.r);
      stream.next(m.omegaF);
      stream.next(m.omegaR);
      stream.next(m.throttle);
      stream.next(m.turn);
      stream.next(m.x_center);
      stream.next(m.y_center);
      stream.next(m.R);
      stream.next(m.f_FLx);
      stream.next(m.f_FLy);
      stream.next(m.f_FLz);
      stream.next(m.f_FRx);
      stream.next(m.f_FRy);
      stream.next(m.f_FRz);
      stream.next(m.f_RLx);
      stream.next(m.f_RLy);
      stream.next(m.f_RLz);
      stream.next(m.f_RRx);
      stream.next(m.f_RRy);
      stream.next(m.f_RRz);
      stream.next(m.ax);
      stream.next(m.ay);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::CarState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::CarState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "Vx: ";
    Printer<double>::stream(s, indent + "  ", v.Vx);
    s << indent << "Vy: ";
    Printer<double>::stream(s, indent + "  ", v.Vy);
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "omegaF: ";
    Printer<double>::stream(s, indent + "  ", v.omegaF);
    s << indent << "omegaR: ";
    Printer<double>::stream(s, indent + "  ", v.omegaR);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "turn: ";
    Printer<double>::stream(s, indent + "  ", v.turn);
    s << indent << "x_center: ";
    Printer<double>::stream(s, indent + "  ", v.x_center);
    s << indent << "y_center: ";
    Printer<double>::stream(s, indent + "  ", v.y_center);
    s << indent << "R: ";
    Printer<double>::stream(s, indent + "  ", v.R);
    s << indent << "f_FLx: ";
    Printer<double>::stream(s, indent + "  ", v.f_FLx);
    s << indent << "f_FLy: ";
    Printer<double>::stream(s, indent + "  ", v.f_FLy);
    s << indent << "f_FLz: ";
    Printer<double>::stream(s, indent + "  ", v.f_FLz);
    s << indent << "f_FRx: ";
    Printer<double>::stream(s, indent + "  ", v.f_FRx);
    s << indent << "f_FRy: ";
    Printer<double>::stream(s, indent + "  ", v.f_FRy);
    s << indent << "f_FRz: ";
    Printer<double>::stream(s, indent + "  ", v.f_FRz);
    s << indent << "f_RLx: ";
    Printer<double>::stream(s, indent + "  ", v.f_RLx);
    s << indent << "f_RLy: ";
    Printer<double>::stream(s, indent + "  ", v.f_RLy);
    s << indent << "f_RLz: ";
    Printer<double>::stream(s, indent + "  ", v.f_RLz);
    s << indent << "f_RRx: ";
    Printer<double>::stream(s, indent + "  ", v.f_RRx);
    s << indent << "f_RRy: ";
    Printer<double>::stream(s, indent + "  ", v.f_RRy);
    s << indent << "f_RRz: ";
    Printer<double>::stream(s, indent + "  ", v.f_RRz);
    s << indent << "ax: ";
    Printer<double>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<double>::stream(s, indent + "  ", v.ay);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_CARSTATE_H
