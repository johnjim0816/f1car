// Generated by gencpp from file acl_msgs/MultiVehTakeoffLandRequest.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_MULTIVEHTAKEOFFLANDREQUEST_H
#define ACL_MSGS_MESSAGE_MULTIVEHTAKEOFFLANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace acl_msgs
{
template <class ContainerAllocator>
struct MultiVehTakeoffLandRequest_
{
  typedef MultiVehTakeoffLandRequest_<ContainerAllocator> Type;

  MultiVehTakeoffLandRequest_()
    : takeoff(false)
    , use_current_pose(false)
    , initial_pose()  {
    }
  MultiVehTakeoffLandRequest_(const ContainerAllocator& _alloc)
    : takeoff(false)
    , use_current_pose(false)
    , initial_pose(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _takeoff_type;
  _takeoff_type takeoff;

   typedef uint8_t _use_current_pose_type;
  _use_current_pose_type use_current_pose;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _initial_pose_type;
  _initial_pose_type initial_pose;





  typedef boost::shared_ptr< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MultiVehTakeoffLandRequest_

typedef ::acl_msgs::MultiVehTakeoffLandRequest_<std::allocator<void> > MultiVehTakeoffLandRequest;

typedef boost::shared_ptr< ::acl_msgs::MultiVehTakeoffLandRequest > MultiVehTakeoffLandRequestPtr;
typedef boost::shared_ptr< ::acl_msgs::MultiVehTakeoffLandRequest const> MultiVehTakeoffLandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.takeoff == rhs.takeoff &&
    lhs.use_current_pose == rhs.use_current_pose &&
    lhs.initial_pose == rhs.initial_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a67fc63c3463f7de36a1ab7d74dd57e";
  }

  static const char* value(const ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a67fc63c3463f7dULL;
  static const uint64_t static_value2 = 0xe36a1ab7d74dd57eULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/MultiVehTakeoffLandRequest";
  }

  static const char* value(const ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool takeoff\n"
"bool use_current_pose\n"
"geometry_msgs/Pose[] initial_pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.takeoff);
      stream.next(m.use_current_pose);
      stream.next(m.initial_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiVehTakeoffLandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::MultiVehTakeoffLandRequest_<ContainerAllocator>& v)
  {
    s << indent << "takeoff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.takeoff);
    s << indent << "use_current_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_current_pose);
    s << indent << "initial_pose[]" << std::endl;
    for (size_t i = 0; i < v.initial_pose.size(); ++i)
    {
      s << indent << "  initial_pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.initial_pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_MULTIVEHTAKEOFFLANDREQUEST_H
