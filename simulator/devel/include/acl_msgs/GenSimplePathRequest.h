// Generated by gencpp from file acl_msgs/GenSimplePathRequest.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_GENSIMPLEPATHREQUEST_H
#define ACL_MSGS_MESSAGE_GENSIMPLEPATHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace acl_msgs
{
template <class ContainerAllocator>
struct GenSimplePathRequest_
{
  typedef GenSimplePathRequest_<ContainerAllocator> Type;

  GenSimplePathRequest_()
    : vmax(0.0)
    , amax(0.0)
    , p0()
    , p1()  {
    }
  GenSimplePathRequest_(const ContainerAllocator& _alloc)
    : vmax(0.0)
    , amax(0.0)
    , p0(_alloc)
    , p1(_alloc)  {
  (void)_alloc;
    }



   typedef double _vmax_type;
  _vmax_type vmax;

   typedef double _amax_type;
  _amax_type amax;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _p0_type;
  _p0_type p0;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _p1_type;
  _p1_type p1;





  typedef boost::shared_ptr< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GenSimplePathRequest_

typedef ::acl_msgs::GenSimplePathRequest_<std::allocator<void> > GenSimplePathRequest;

typedef boost::shared_ptr< ::acl_msgs::GenSimplePathRequest > GenSimplePathRequestPtr;
typedef boost::shared_ptr< ::acl_msgs::GenSimplePathRequest const> GenSimplePathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::GenSimplePathRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::GenSimplePathRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vmax == rhs.vmax &&
    lhs.amax == rhs.amax &&
    lhs.p0 == rhs.p0 &&
    lhs.p1 == rhs.p1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::GenSimplePathRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::GenSimplePathRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "394ea102ac842ab8227285101e6f3290";
  }

  static const char* value(const ::acl_msgs::GenSimplePathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x394ea102ac842ab8ULL;
  static const uint64_t static_value2 = 0x227285101e6f3290ULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/GenSimplePathRequest";
  }

  static const char* value(const ::acl_msgs::GenSimplePathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 vmax\n"
"float64 amax\n"
"geometry_msgs/Vector3 p0\n"
"geometry_msgs/Vector3 p1\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::acl_msgs::GenSimplePathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vmax);
      stream.next(m.amax);
      stream.next(m.p0);
      stream.next(m.p1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenSimplePathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::GenSimplePathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::GenSimplePathRequest_<ContainerAllocator>& v)
  {
    s << indent << "vmax: ";
    Printer<double>::stream(s, indent + "  ", v.vmax);
    s << indent << "amax: ";
    Printer<double>::stream(s, indent + "  ", v.amax);
    s << indent << "p0: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.p0);
    s << indent << "p1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.p1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_GENSIMPLEPATHREQUEST_H
