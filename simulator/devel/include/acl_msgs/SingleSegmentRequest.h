// Generated by gencpp from file acl_msgs/SingleSegmentRequest.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_SINGLESEGMENTREQUEST_H
#define ACL_MSGS_MESSAGE_SINGLESEGMENTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <acl_msgs/SimpleState.h>

namespace acl_msgs
{
template <class ContainerAllocator>
struct SingleSegmentRequest_
{
  typedef SingleSegmentRequest_<ContainerAllocator> Type;

  SingleSegmentRequest_()
    : s()
    , r(0.0)
    , v(0.0)
    , reset_state(false)
    , use_start_state(false)
    , d(0)  {
    }
  SingleSegmentRequest_(const ContainerAllocator& _alloc)
    : s(_alloc)
    , r(0.0)
    , v(0.0)
    , reset_state(false)
    , use_start_state(false)
    , d(0)  {
  (void)_alloc;
    }



   typedef  ::acl_msgs::SimpleState_<ContainerAllocator>  _s_type;
  _s_type s;

   typedef double _r_type;
  _r_type r;

   typedef double _v_type;
  _v_type v;

   typedef uint8_t _reset_state_type;
  _reset_state_type reset_state;

   typedef uint8_t _use_start_state_type;
  _use_start_state_type use_start_state;

   typedef int64_t _d_type;
  _d_type d;





  typedef boost::shared_ptr< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SingleSegmentRequest_

typedef ::acl_msgs::SingleSegmentRequest_<std::allocator<void> > SingleSegmentRequest;

typedef boost::shared_ptr< ::acl_msgs::SingleSegmentRequest > SingleSegmentRequestPtr;
typedef boost::shared_ptr< ::acl_msgs::SingleSegmentRequest const> SingleSegmentRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::SingleSegmentRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::SingleSegmentRequest_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.r == rhs.r &&
    lhs.v == rhs.v &&
    lhs.reset_state == rhs.reset_state &&
    lhs.use_start_state == rhs.use_start_state &&
    lhs.d == rhs.d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::SingleSegmentRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::SingleSegmentRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23960faeeb6a988afa5a44d232a1bb47";
  }

  static const char* value(const ::acl_msgs::SingleSegmentRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23960faeeb6a988aULL;
  static const uint64_t static_value2 = 0xfa5a44d232a1bb47ULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/SingleSegmentRequest";
  }

  static const char* value(const ::acl_msgs::SingleSegmentRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/SimpleState s\n"
"float64 r\n"
"float64 v\n"
"bool reset_state\n"
"bool use_start_state\n"
"int64 d\n"
"\n"
"================================================================================\n"
"MSG: acl_msgs/SimpleState\n"
"int64 segment\n"
"float64 x\n"
"float64 y\n"
"float64 psi\n"
"float64 omega\n"
"float64 Vx\n"
"float64 Vy\n"
"float64 psidot\n"
"int64 slipping\n"
"float64 prev_radius\n"
;
  }

  static const char* value(const ::acl_msgs::SingleSegmentRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.r);
      stream.next(m.v);
      stream.next(m.reset_state);
      stream.next(m.use_start_state);
      stream.next(m.d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SingleSegmentRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::SingleSegmentRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::SingleSegmentRequest_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    s << std::endl;
    Printer< ::acl_msgs::SimpleState_<ContainerAllocator> >::stream(s, indent + "  ", v.s);
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "reset_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_state);
    s << indent << "use_start_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_start_state);
    s << indent << "d: ";
    Printer<int64_t>::stream(s, indent + "  ", v.d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_SINGLESEGMENTREQUEST_H
