// Generated by gencpp from file acl_msgs/CarGoal.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_CARGOAL_H
#define ACL_MSGS_MESSAGE_CARGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace acl_msgs
{
template <class ContainerAllocator>
struct CarGoal_
{
  typedef CarGoal_<ContainerAllocator> Type;

  CarGoal_()
    : header()
    , psi(0.0)
    , r(0.0)
    , v(0.0)
    , e(0.0)
    , reset_v_int(false)  {
    }
  CarGoal_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , psi(0.0)
    , r(0.0)
    , v(0.0)
    , e(0.0)
    , reset_v_int(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _psi_type;
  _psi_type psi;

   typedef double _r_type;
  _r_type r;

   typedef double _v_type;
  _v_type v;

   typedef double _e_type;
  _e_type e;

   typedef uint8_t _reset_v_int_type;
  _reset_v_int_type reset_v_int;





  typedef boost::shared_ptr< ::acl_msgs::CarGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::CarGoal_<ContainerAllocator> const> ConstPtr;

}; // struct CarGoal_

typedef ::acl_msgs::CarGoal_<std::allocator<void> > CarGoal;

typedef boost::shared_ptr< ::acl_msgs::CarGoal > CarGoalPtr;
typedef boost::shared_ptr< ::acl_msgs::CarGoal const> CarGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::CarGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::CarGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::CarGoal_<ContainerAllocator1> & lhs, const ::acl_msgs::CarGoal_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.psi == rhs.psi &&
    lhs.r == rhs.r &&
    lhs.v == rhs.v &&
    lhs.e == rhs.e &&
    lhs.reset_v_int == rhs.reset_v_int;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::CarGoal_<ContainerAllocator1> & lhs, const ::acl_msgs::CarGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::CarGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::CarGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::CarGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::CarGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::CarGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::CarGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::CarGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17c45119fc0cd18a8ee744e3a5b15a39";
  }

  static const char* value(const ::acl_msgs::CarGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17c45119fc0cd18aULL;
  static const uint64_t static_value2 = 0x8ee744e3a5b15a39ULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::CarGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/CarGoal";
  }

  static const char* value(const ::acl_msgs::CarGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::CarGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 psi\n"
"float64 r\n"
"float64 v\n"
"float64 e\n"
"bool reset_v_int\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::acl_msgs::CarGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::CarGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.psi);
      stream.next(m.r);
      stream.next(m.v);
      stream.next(m.e);
      stream.next(m.reset_v_int);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::CarGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::CarGoal_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "e: ";
    Printer<double>::stream(s, indent + "  ", v.e);
    s << indent << "reset_v_int: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_v_int);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_CARGOAL_H
