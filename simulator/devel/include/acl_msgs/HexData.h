// Generated by gencpp from file acl_msgs/HexData.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_HEXDATA_H
#define ACL_MSGS_MESSAGE_HEXDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace acl_msgs
{
template <class ContainerAllocator>
struct HexData_
{
  typedef HexData_<ContainerAllocator> Type;

  HexData_()
    : header()
    , m13()
    , m46()
    , FBody()
    , MBody()
    , XDesired()  {
    }
  HexData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , m13(_alloc)
    , m46(_alloc)
    , FBody(_alloc)
    , MBody(_alloc)
    , XDesired(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _m13_type;
  _m13_type m13;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _m46_type;
  _m46_type m46;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _FBody_type;
  _FBody_type FBody;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _MBody_type;
  _MBody_type MBody;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _XDesired_type;
  _XDesired_type XDesired;





  typedef boost::shared_ptr< ::acl_msgs::HexData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::HexData_<ContainerAllocator> const> ConstPtr;

}; // struct HexData_

typedef ::acl_msgs::HexData_<std::allocator<void> > HexData;

typedef boost::shared_ptr< ::acl_msgs::HexData > HexDataPtr;
typedef boost::shared_ptr< ::acl_msgs::HexData const> HexDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::HexData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::HexData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::HexData_<ContainerAllocator1> & lhs, const ::acl_msgs::HexData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.m13 == rhs.m13 &&
    lhs.m46 == rhs.m46 &&
    lhs.FBody == rhs.FBody &&
    lhs.MBody == rhs.MBody &&
    lhs.XDesired == rhs.XDesired;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::HexData_<ContainerAllocator1> & lhs, const ::acl_msgs::HexData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::HexData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::HexData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::HexData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::HexData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::HexData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::HexData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::HexData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "106174b561cc37cf60ae191c835ecc70";
  }

  static const char* value(const ::acl_msgs::HexData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x106174b561cc37cfULL;
  static const uint64_t static_value2 = 0x60ae191c835ecc70ULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::HexData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/HexData";
  }

  static const char* value(const ::acl_msgs::HexData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::HexData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Vector3 m13\n"
"geometry_msgs/Vector3 m46\n"
"geometry_msgs/Vector3 FBody\n"
"geometry_msgs/Vector3 MBody\n"
"geometry_msgs/Vector3 XDesired\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::acl_msgs::HexData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::HexData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.m13);
      stream.next(m.m46);
      stream.next(m.FBody);
      stream.next(m.MBody);
      stream.next(m.XDesired);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HexData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::HexData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::HexData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "m13: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.m13);
    s << indent << "m46: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.m46);
    s << indent << "FBody: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.FBody);
    s << indent << "MBody: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.MBody);
    s << indent << "XDesired: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.XDesired);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_HEXDATA_H
