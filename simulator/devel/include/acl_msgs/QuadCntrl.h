// Generated by gencpp from file acl_msgs/QuadCntrl.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_QUADCNTRL_H
#define ACL_MSGS_MESSAGE_QUADCNTRL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace acl_msgs
{
template <class ContainerAllocator>
struct QuadCntrl_
{
  typedef QuadCntrl_<ContainerAllocator> Type;

  QuadCntrl_()
    : header()
    , pose()
    , pose_actual()
    , twist()
    , twist_actual()
    , rpy()
    , rpy_actual()
    , accel()
    , accel_fb()
    , jerk()
    , jerk_fb()
    , pos_integrator()
    , vel_integrator()
    , s()
    , c()
    , phi()
    , phi_m()
    , u(0.0)
    , a(0.0)
    , b(0.0)
    , yaw(0.0)
    , f_total(0.0)
    , throttle(0.0)
    , att_status(0)
    , vicon_time(0.0)  {
    }
  QuadCntrl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose(_alloc)
    , pose_actual(_alloc)
    , twist(_alloc)
    , twist_actual(_alloc)
    , rpy(_alloc)
    , rpy_actual(_alloc)
    , accel(_alloc)
    , accel_fb(_alloc)
    , jerk(_alloc)
    , jerk_fb(_alloc)
    , pos_integrator(_alloc)
    , vel_integrator(_alloc)
    , s(_alloc)
    , c(_alloc)
    , phi(_alloc)
    , phi_m(_alloc)
    , u(0.0)
    , a(0.0)
    , b(0.0)
    , yaw(0.0)
    , f_total(0.0)
    , throttle(0.0)
    , att_status(0)
    , vicon_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_actual_type;
  _pose_actual_type pose_actual;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_actual_type;
  _twist_actual_type twist_actual;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rpy_type;
  _rpy_type rpy;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rpy_actual_type;
  _rpy_actual_type rpy_actual;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_fb_type;
  _accel_fb_type accel_fb;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _jerk_type;
  _jerk_type jerk;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _jerk_fb_type;
  _jerk_fb_type jerk_fb;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_integrator_type;
  _pos_integrator_type pos_integrator;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_integrator_type;
  _vel_integrator_type vel_integrator;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _s_type;
  _s_type s;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _c_type;
  _c_type c;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _phi_type;
  _phi_type phi;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _phi_m_type;
  _phi_m_type phi_m;

   typedef double _u_type;
  _u_type u;

   typedef double _a_type;
  _a_type a;

   typedef double _b_type;
  _b_type b;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _f_total_type;
  _f_total_type f_total;

   typedef double _throttle_type;
  _throttle_type throttle;

   typedef int16_t _att_status_type;
  _att_status_type att_status;

   typedef double _vicon_time_type;
  _vicon_time_type vicon_time;





  typedef boost::shared_ptr< ::acl_msgs::QuadCntrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::QuadCntrl_<ContainerAllocator> const> ConstPtr;

}; // struct QuadCntrl_

typedef ::acl_msgs::QuadCntrl_<std::allocator<void> > QuadCntrl;

typedef boost::shared_ptr< ::acl_msgs::QuadCntrl > QuadCntrlPtr;
typedef boost::shared_ptr< ::acl_msgs::QuadCntrl const> QuadCntrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::QuadCntrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::QuadCntrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::QuadCntrl_<ContainerAllocator1> & lhs, const ::acl_msgs::QuadCntrl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pose == rhs.pose &&
    lhs.pose_actual == rhs.pose_actual &&
    lhs.twist == rhs.twist &&
    lhs.twist_actual == rhs.twist_actual &&
    lhs.rpy == rhs.rpy &&
    lhs.rpy_actual == rhs.rpy_actual &&
    lhs.accel == rhs.accel &&
    lhs.accel_fb == rhs.accel_fb &&
    lhs.jerk == rhs.jerk &&
    lhs.jerk_fb == rhs.jerk_fb &&
    lhs.pos_integrator == rhs.pos_integrator &&
    lhs.vel_integrator == rhs.vel_integrator &&
    lhs.s == rhs.s &&
    lhs.c == rhs.c &&
    lhs.phi == rhs.phi &&
    lhs.phi_m == rhs.phi_m &&
    lhs.u == rhs.u &&
    lhs.a == rhs.a &&
    lhs.b == rhs.b &&
    lhs.yaw == rhs.yaw &&
    lhs.f_total == rhs.f_total &&
    lhs.throttle == rhs.throttle &&
    lhs.att_status == rhs.att_status &&
    lhs.vicon_time == rhs.vicon_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::QuadCntrl_<ContainerAllocator1> & lhs, const ::acl_msgs::QuadCntrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::QuadCntrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::QuadCntrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::QuadCntrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::QuadCntrl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::QuadCntrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::QuadCntrl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::QuadCntrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73822b1fb2aea2756d0f5f88004413c3";
  }

  static const char* value(const ::acl_msgs::QuadCntrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73822b1fb2aea275ULL;
  static const uint64_t static_value2 = 0x6d0f5f88004413c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::QuadCntrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/QuadCntrl";
  }

  static const char* value(const ::acl_msgs::QuadCntrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::QuadCntrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Pose pose_actual\n"
"geometry_msgs/Twist twist\n"
"geometry_msgs/Twist twist_actual\n"
"geometry_msgs/Vector3 rpy\n"
"geometry_msgs/Vector3 rpy_actual\n"
"geometry_msgs/Vector3 accel\n"
"geometry_msgs/Vector3 accel_fb\n"
"geometry_msgs/Vector3 jerk\n"
"geometry_msgs/Vector3 jerk_fb\n"
"geometry_msgs/Vector3 pos_integrator\n"
"geometry_msgs/Vector3 vel_integrator\n"
"geometry_msgs/Vector3 s\n"
"geometry_msgs/Vector3 c\n"
"geometry_msgs/Vector3 phi\n"
"geometry_msgs/Vector3 phi_m\n"
"float64 u\n"
"float64 a\n"
"float64 b\n"
"float64 yaw\n"
"float64 f_total\n"
"float64 throttle\n"
"int16 att_status\n"
"float64 vicon_time\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::acl_msgs::QuadCntrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::QuadCntrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose);
      stream.next(m.pose_actual);
      stream.next(m.twist);
      stream.next(m.twist_actual);
      stream.next(m.rpy);
      stream.next(m.rpy_actual);
      stream.next(m.accel);
      stream.next(m.accel_fb);
      stream.next(m.jerk);
      stream.next(m.jerk_fb);
      stream.next(m.pos_integrator);
      stream.next(m.vel_integrator);
      stream.next(m.s);
      stream.next(m.c);
      stream.next(m.phi);
      stream.next(m.phi_m);
      stream.next(m.u);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.yaw);
      stream.next(m.f_total);
      stream.next(m.throttle);
      stream.next(m.att_status);
      stream.next(m.vicon_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QuadCntrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::QuadCntrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::QuadCntrl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "pose_actual: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_actual);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "twist_actual: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist_actual);
    s << indent << "rpy: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rpy);
    s << indent << "rpy_actual: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rpy_actual);
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "accel_fb: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel_fb);
    s << indent << "jerk: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.jerk);
    s << indent << "jerk_fb: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.jerk_fb);
    s << indent << "pos_integrator: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_integrator);
    s << indent << "vel_integrator: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel_integrator);
    s << indent << "s: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.s);
    s << indent << "c: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.c);
    s << indent << "phi: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.phi);
    s << indent << "phi_m: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.phi_m);
    s << indent << "u: ";
    Printer<double>::stream(s, indent + "  ", v.u);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "f_total: ";
    Printer<double>::stream(s, indent + "  ", v.f_total);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "att_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.att_status);
    s << indent << "vicon_time: ";
    Printer<double>::stream(s, indent + "  ", v.vicon_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_QUADCNTRL_H
