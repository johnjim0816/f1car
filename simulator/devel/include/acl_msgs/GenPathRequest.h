// Generated by gencpp from file acl_msgs/GenPathRequest.msg
// DO NOT EDIT!


#ifndef ACL_MSGS_MESSAGE_GENPATHREQUEST_H
#define ACL_MSGS_MESSAGE_GENPATHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace acl_msgs
{
template <class ContainerAllocator>
struct GenPathRequest_
{
  typedef GenPathRequest_<ContainerAllocator> Type;

  GenPathRequest_()
    : N(0)
    , numD(0)
    , T(0.0)
    , h(0.0)
    , R(0.0)
    , p0()
    , v0()
    , a0()
    , p1()
    , v1()
    , a1()
    , obstacles()  {
    }
  GenPathRequest_(const ContainerAllocator& _alloc)
    : N(0)
    , numD(0)
    , T(0.0)
    , h(0.0)
    , R(0.0)
    , p0(_alloc)
    , v0(_alloc)
    , a0(_alloc)
    , p1(_alloc)
    , v1(_alloc)
    , a1(_alloc)
    , obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _N_type;
  _N_type N;

   typedef uint16_t _numD_type;
  _numD_type numD;

   typedef double _T_type;
  _T_type T;

   typedef double _h_type;
  _h_type h;

   typedef double _R_type;
  _R_type R;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _p0_type;
  _p0_type p0;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _v0_type;
  _v0_type v0;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _a0_type;
  _a0_type a0;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _p1_type;
  _p1_type p1;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _v1_type;
  _v1_type v1;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _a1_type;
  _a1_type a1;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _obstacles_type;
  _obstacles_type obstacles;





  typedef boost::shared_ptr< ::acl_msgs::GenPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acl_msgs::GenPathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GenPathRequest_

typedef ::acl_msgs::GenPathRequest_<std::allocator<void> > GenPathRequest;

typedef boost::shared_ptr< ::acl_msgs::GenPathRequest > GenPathRequestPtr;
typedef boost::shared_ptr< ::acl_msgs::GenPathRequest const> GenPathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acl_msgs::GenPathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acl_msgs::GenPathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acl_msgs::GenPathRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::GenPathRequest_<ContainerAllocator2> & rhs)
{
  return lhs.N == rhs.N &&
    lhs.numD == rhs.numD &&
    lhs.T == rhs.T &&
    lhs.h == rhs.h &&
    lhs.R == rhs.R &&
    lhs.p0 == rhs.p0 &&
    lhs.v0 == rhs.v0 &&
    lhs.a0 == rhs.a0 &&
    lhs.p1 == rhs.p1 &&
    lhs.v1 == rhs.v1 &&
    lhs.a1 == rhs.a1 &&
    lhs.obstacles == rhs.obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acl_msgs::GenPathRequest_<ContainerAllocator1> & lhs, const ::acl_msgs::GenPathRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::GenPathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acl_msgs::GenPathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::GenPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acl_msgs::GenPathRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::GenPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acl_msgs::GenPathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acl_msgs::GenPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acbaa095a36e3ec458f23d58e640173a";
  }

  static const char* value(const ::acl_msgs::GenPathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacbaa095a36e3ec4ULL;
  static const uint64_t static_value2 = 0x58f23d58e640173aULL;
};

template<class ContainerAllocator>
struct DataType< ::acl_msgs::GenPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acl_msgs/GenPathRequest";
  }

  static const char* value(const ::acl_msgs::GenPathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acl_msgs::GenPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 N # note: including N here is a little redundant as it can be inferred from the dimension of the input vectors.  However, it is useful for error checking.\n"
"uint16 numD\n"
"float64 T\n"
"float64 h\n"
"float64 R\n"
"geometry_msgs/Vector3[] p0\n"
"geometry_msgs/Vector3[] v0\n"
"geometry_msgs/Vector3[] a0\n"
"geometry_msgs/Vector3[] p1\n"
"geometry_msgs/Vector3[] v1\n"
"geometry_msgs/Vector3[] a1\n"
"geometry_msgs/Vector3[] obstacles\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::acl_msgs::GenPathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acl_msgs::GenPathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.N);
      stream.next(m.numD);
      stream.next(m.T);
      stream.next(m.h);
      stream.next(m.R);
      stream.next(m.p0);
      stream.next(m.v0);
      stream.next(m.a0);
      stream.next(m.p1);
      stream.next(m.v1);
      stream.next(m.a1);
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenPathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acl_msgs::GenPathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acl_msgs::GenPathRequest_<ContainerAllocator>& v)
  {
    s << indent << "N: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.N);
    s << indent << "numD: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.numD);
    s << indent << "T: ";
    Printer<double>::stream(s, indent + "  ", v.T);
    s << indent << "h: ";
    Printer<double>::stream(s, indent + "  ", v.h);
    s << indent << "R: ";
    Printer<double>::stream(s, indent + "  ", v.R);
    s << indent << "p0[]" << std::endl;
    for (size_t i = 0; i < v.p0.size(); ++i)
    {
      s << indent << "  p0[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.p0[i]);
    }
    s << indent << "v0[]" << std::endl;
    for (size_t i = 0; i < v.v0.size(); ++i)
    {
      s << indent << "  v0[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.v0[i]);
    }
    s << indent << "a0[]" << std::endl;
    for (size_t i = 0; i < v.a0.size(); ++i)
    {
      s << indent << "  a0[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.a0[i]);
    }
    s << indent << "p1[]" << std::endl;
    for (size_t i = 0; i < v.p1.size(); ++i)
    {
      s << indent << "  p1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.p1[i]);
    }
    s << indent << "v1[]" << std::endl;
    for (size_t i = 0; i < v.v1.size(); ++i)
    {
      s << indent << "  v1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.v1[i]);
    }
    s << indent << "a1[]" << std::endl;
    for (size_t i = 0; i < v.a1.size(); ++i)
    {
      s << indent << "  a1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.a1[i]);
    }
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACL_MSGS_MESSAGE_GENPATHREQUEST_H
