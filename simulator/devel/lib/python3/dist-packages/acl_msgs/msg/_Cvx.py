# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/Cvx.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Cvx(genpy.Message):
  _md5sum = "74962b3120644cbb8f5c179e3fb331a0"
  _type = "acl_msgs/Cvx"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

float64 JPSa_ms   
float64 JPS_fix_ms  
float64 JPStotal_ms 

int8 JPSa_solved      
int8 JPS_fix_solved   

int8 whole_solved
int8 safe_solved

int8 entered_safe_path

int8 needToComputeSafePath

float64 cvx_decomp_whole_ms  
 

float64 gurobi_whole_ms  
float64 gurobi_whole_ms_mine 
float64 gurobi_whole_trials
float64 gurobi_whole_dt
float64 gurobi_whole_factor


float64 cvx_decomp_safe_ms 

float64 gurobi_safe_ms  
float64 gurobi_safe_ms_mine 
float64 gurobi_safe_trials
float64 gurobi_safe_dt
float64 gurobi_safe_factor

float64 total_replanning_ms

float64 Ja
float64 Ja_inside
float64 Ja_outside

float64 Jb
float64 Jb_inside
float64 Jb_outside
int8 decision 

float64 veloc_norm
float64 total_dist 
float64 angle_deg  

int8 computed_both  

int8 deltaT
int8 indexR
int8 indexH
float64 indexR_percentage
float64 deltaT_percentage
int8 k


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','JPSa_ms','JPS_fix_ms','JPStotal_ms','JPSa_solved','JPS_fix_solved','whole_solved','safe_solved','entered_safe_path','needToComputeSafePath','cvx_decomp_whole_ms','gurobi_whole_ms','gurobi_whole_ms_mine','gurobi_whole_trials','gurobi_whole_dt','gurobi_whole_factor','cvx_decomp_safe_ms','gurobi_safe_ms','gurobi_safe_ms_mine','gurobi_safe_trials','gurobi_safe_dt','gurobi_safe_factor','total_replanning_ms','Ja','Ja_inside','Ja_outside','Jb','Jb_inside','Jb_outside','decision','veloc_norm','total_dist','angle_deg','computed_both','deltaT','indexR','indexH','indexR_percentage','deltaT_percentage','k']
  _slot_types = ['std_msgs/Header','float64','float64','float64','int8','int8','int8','int8','int8','int8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int8','float64','float64','float64','int8','int8','int8','int8','float64','float64','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,JPSa_ms,JPS_fix_ms,JPStotal_ms,JPSa_solved,JPS_fix_solved,whole_solved,safe_solved,entered_safe_path,needToComputeSafePath,cvx_decomp_whole_ms,gurobi_whole_ms,gurobi_whole_ms_mine,gurobi_whole_trials,gurobi_whole_dt,gurobi_whole_factor,cvx_decomp_safe_ms,gurobi_safe_ms,gurobi_safe_ms_mine,gurobi_safe_trials,gurobi_safe_dt,gurobi_safe_factor,total_replanning_ms,Ja,Ja_inside,Ja_outside,Jb,Jb_inside,Jb_outside,decision,veloc_norm,total_dist,angle_deg,computed_both,deltaT,indexR,indexH,indexR_percentage,deltaT_percentage,k

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Cvx, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.JPSa_ms is None:
        self.JPSa_ms = 0.
      if self.JPS_fix_ms is None:
        self.JPS_fix_ms = 0.
      if self.JPStotal_ms is None:
        self.JPStotal_ms = 0.
      if self.JPSa_solved is None:
        self.JPSa_solved = 0
      if self.JPS_fix_solved is None:
        self.JPS_fix_solved = 0
      if self.whole_solved is None:
        self.whole_solved = 0
      if self.safe_solved is None:
        self.safe_solved = 0
      if self.entered_safe_path is None:
        self.entered_safe_path = 0
      if self.needToComputeSafePath is None:
        self.needToComputeSafePath = 0
      if self.cvx_decomp_whole_ms is None:
        self.cvx_decomp_whole_ms = 0.
      if self.gurobi_whole_ms is None:
        self.gurobi_whole_ms = 0.
      if self.gurobi_whole_ms_mine is None:
        self.gurobi_whole_ms_mine = 0.
      if self.gurobi_whole_trials is None:
        self.gurobi_whole_trials = 0.
      if self.gurobi_whole_dt is None:
        self.gurobi_whole_dt = 0.
      if self.gurobi_whole_factor is None:
        self.gurobi_whole_factor = 0.
      if self.cvx_decomp_safe_ms is None:
        self.cvx_decomp_safe_ms = 0.
      if self.gurobi_safe_ms is None:
        self.gurobi_safe_ms = 0.
      if self.gurobi_safe_ms_mine is None:
        self.gurobi_safe_ms_mine = 0.
      if self.gurobi_safe_trials is None:
        self.gurobi_safe_trials = 0.
      if self.gurobi_safe_dt is None:
        self.gurobi_safe_dt = 0.
      if self.gurobi_safe_factor is None:
        self.gurobi_safe_factor = 0.
      if self.total_replanning_ms is None:
        self.total_replanning_ms = 0.
      if self.Ja is None:
        self.Ja = 0.
      if self.Ja_inside is None:
        self.Ja_inside = 0.
      if self.Ja_outside is None:
        self.Ja_outside = 0.
      if self.Jb is None:
        self.Jb = 0.
      if self.Jb_inside is None:
        self.Jb_inside = 0.
      if self.Jb_outside is None:
        self.Jb_outside = 0.
      if self.decision is None:
        self.decision = 0
      if self.veloc_norm is None:
        self.veloc_norm = 0.
      if self.total_dist is None:
        self.total_dist = 0.
      if self.angle_deg is None:
        self.angle_deg = 0.
      if self.computed_both is None:
        self.computed_both = 0
      if self.deltaT is None:
        self.deltaT = 0
      if self.indexR is None:
        self.indexR = 0
      if self.indexH is None:
        self.indexH = 0
      if self.indexR_percentage is None:
        self.indexR_percentage = 0.
      if self.deltaT_percentage is None:
        self.deltaT_percentage = 0.
      if self.k is None:
        self.k = 0
    else:
      self.header = std_msgs.msg.Header()
      self.JPSa_ms = 0.
      self.JPS_fix_ms = 0.
      self.JPStotal_ms = 0.
      self.JPSa_solved = 0
      self.JPS_fix_solved = 0
      self.whole_solved = 0
      self.safe_solved = 0
      self.entered_safe_path = 0
      self.needToComputeSafePath = 0
      self.cvx_decomp_whole_ms = 0.
      self.gurobi_whole_ms = 0.
      self.gurobi_whole_ms_mine = 0.
      self.gurobi_whole_trials = 0.
      self.gurobi_whole_dt = 0.
      self.gurobi_whole_factor = 0.
      self.cvx_decomp_safe_ms = 0.
      self.gurobi_safe_ms = 0.
      self.gurobi_safe_ms_mine = 0.
      self.gurobi_safe_trials = 0.
      self.gurobi_safe_dt = 0.
      self.gurobi_safe_factor = 0.
      self.total_replanning_ms = 0.
      self.Ja = 0.
      self.Ja_inside = 0.
      self.Ja_outside = 0.
      self.Jb = 0.
      self.Jb_inside = 0.
      self.Jb_outside = 0.
      self.decision = 0
      self.veloc_norm = 0.
      self.total_dist = 0.
      self.angle_deg = 0.
      self.computed_both = 0
      self.deltaT = 0
      self.indexR = 0
      self.indexH = 0
      self.indexR_percentage = 0.
      self.deltaT_percentage = 0.
      self.k = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d6b19db3d4b2db().pack(_x.JPSa_ms, _x.JPS_fix_ms, _x.JPStotal_ms, _x.JPSa_solved, _x.JPS_fix_solved, _x.whole_solved, _x.safe_solved, _x.entered_safe_path, _x.needToComputeSafePath, _x.cvx_decomp_whole_ms, _x.gurobi_whole_ms, _x.gurobi_whole_ms_mine, _x.gurobi_whole_trials, _x.gurobi_whole_dt, _x.gurobi_whole_factor, _x.cvx_decomp_safe_ms, _x.gurobi_safe_ms, _x.gurobi_safe_ms_mine, _x.gurobi_safe_trials, _x.gurobi_safe_dt, _x.gurobi_safe_factor, _x.total_replanning_ms, _x.Ja, _x.Ja_inside, _x.Ja_outside, _x.Jb, _x.Jb_inside, _x.Jb_outside, _x.decision, _x.veloc_norm, _x.total_dist, _x.angle_deg, _x.computed_both, _x.deltaT, _x.indexR, _x.indexH, _x.indexR_percentage, _x.deltaT_percentage, _x.k))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 228
      (_x.JPSa_ms, _x.JPS_fix_ms, _x.JPStotal_ms, _x.JPSa_solved, _x.JPS_fix_solved, _x.whole_solved, _x.safe_solved, _x.entered_safe_path, _x.needToComputeSafePath, _x.cvx_decomp_whole_ms, _x.gurobi_whole_ms, _x.gurobi_whole_ms_mine, _x.gurobi_whole_trials, _x.gurobi_whole_dt, _x.gurobi_whole_factor, _x.cvx_decomp_safe_ms, _x.gurobi_safe_ms, _x.gurobi_safe_ms_mine, _x.gurobi_safe_trials, _x.gurobi_safe_dt, _x.gurobi_safe_factor, _x.total_replanning_ms, _x.Ja, _x.Ja_inside, _x.Ja_outside, _x.Jb, _x.Jb_inside, _x.Jb_outside, _x.decision, _x.veloc_norm, _x.total_dist, _x.angle_deg, _x.computed_both, _x.deltaT, _x.indexR, _x.indexH, _x.indexR_percentage, _x.deltaT_percentage, _x.k,) = _get_struct_3d6b19db3d4b2db().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d6b19db3d4b2db().pack(_x.JPSa_ms, _x.JPS_fix_ms, _x.JPStotal_ms, _x.JPSa_solved, _x.JPS_fix_solved, _x.whole_solved, _x.safe_solved, _x.entered_safe_path, _x.needToComputeSafePath, _x.cvx_decomp_whole_ms, _x.gurobi_whole_ms, _x.gurobi_whole_ms_mine, _x.gurobi_whole_trials, _x.gurobi_whole_dt, _x.gurobi_whole_factor, _x.cvx_decomp_safe_ms, _x.gurobi_safe_ms, _x.gurobi_safe_ms_mine, _x.gurobi_safe_trials, _x.gurobi_safe_dt, _x.gurobi_safe_factor, _x.total_replanning_ms, _x.Ja, _x.Ja_inside, _x.Ja_outside, _x.Jb, _x.Jb_inside, _x.Jb_outside, _x.decision, _x.veloc_norm, _x.total_dist, _x.angle_deg, _x.computed_both, _x.deltaT, _x.indexR, _x.indexH, _x.indexR_percentage, _x.deltaT_percentage, _x.k))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 228
      (_x.JPSa_ms, _x.JPS_fix_ms, _x.JPStotal_ms, _x.JPSa_solved, _x.JPS_fix_solved, _x.whole_solved, _x.safe_solved, _x.entered_safe_path, _x.needToComputeSafePath, _x.cvx_decomp_whole_ms, _x.gurobi_whole_ms, _x.gurobi_whole_ms_mine, _x.gurobi_whole_trials, _x.gurobi_whole_dt, _x.gurobi_whole_factor, _x.cvx_decomp_safe_ms, _x.gurobi_safe_ms, _x.gurobi_safe_ms_mine, _x.gurobi_safe_trials, _x.gurobi_safe_dt, _x.gurobi_safe_factor, _x.total_replanning_ms, _x.Ja, _x.Ja_inside, _x.Ja_outside, _x.Jb, _x.Jb_inside, _x.Jb_outside, _x.decision, _x.veloc_norm, _x.total_dist, _x.angle_deg, _x.computed_both, _x.deltaT, _x.indexR, _x.indexH, _x.indexR_percentage, _x.deltaT_percentage, _x.k,) = _get_struct_3d6b19db3d4b2db().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d6b19db3d4b2db = None
def _get_struct_3d6b19db3d4b2db():
    global _struct_3d6b19db3d4b2db
    if _struct_3d6b19db3d4b2db is None:
        _struct_3d6b19db3d4b2db = struct.Struct("<3d6b19db3d4b2db")
    return _struct_3d6b19db3d4b2db
