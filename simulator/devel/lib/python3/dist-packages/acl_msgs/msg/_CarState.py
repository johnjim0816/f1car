# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/CarState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class CarState(genpy.Message):
  _md5sum = "24e7939ba4db72b0c2b93d5f9545e13b"
  _type = "acl_msgs/CarState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
geometry_msgs/Pose pose
float64 Vx
float64 Vy
float64 r
float64 omegaF
float64 omegaR
float64 throttle
float64 turn
float64 x_center
float64 y_center
float64 R
float64 f_FLx
float64 f_FLy
float64 f_FLz
float64 f_FRx
float64 f_FRy
float64 f_FRz
float64 f_RLx
float64 f_RLy
float64 f_RLz
float64 f_RRx
float64 f_RRy
float64 f_RRz
float64 ax
float64 ay

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','pose','Vx','Vy','r','omegaF','omegaR','throttle','turn','x_center','y_center','R','f_FLx','f_FLy','f_FLz','f_FRx','f_FRy','f_FRz','f_RLx','f_RLy','f_RLz','f_RRx','f_RRy','f_RRz','ax','ay']
  _slot_types = ['std_msgs/Header','geometry_msgs/Pose','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,pose,Vx,Vy,r,omegaF,omegaR,throttle,turn,x_center,y_center,R,f_FLx,f_FLy,f_FLz,f_FRx,f_FRy,f_FRz,f_RLx,f_RLy,f_RLz,f_RRx,f_RRy,f_RRz,ax,ay

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.Vx is None:
        self.Vx = 0.
      if self.Vy is None:
        self.Vy = 0.
      if self.r is None:
        self.r = 0.
      if self.omegaF is None:
        self.omegaF = 0.
      if self.omegaR is None:
        self.omegaR = 0.
      if self.throttle is None:
        self.throttle = 0.
      if self.turn is None:
        self.turn = 0.
      if self.x_center is None:
        self.x_center = 0.
      if self.y_center is None:
        self.y_center = 0.
      if self.R is None:
        self.R = 0.
      if self.f_FLx is None:
        self.f_FLx = 0.
      if self.f_FLy is None:
        self.f_FLy = 0.
      if self.f_FLz is None:
        self.f_FLz = 0.
      if self.f_FRx is None:
        self.f_FRx = 0.
      if self.f_FRy is None:
        self.f_FRy = 0.
      if self.f_FRz is None:
        self.f_FRz = 0.
      if self.f_RLx is None:
        self.f_RLx = 0.
      if self.f_RLy is None:
        self.f_RLy = 0.
      if self.f_RLz is None:
        self.f_RLz = 0.
      if self.f_RRx is None:
        self.f_RRx = 0.
      if self.f_RRy is None:
        self.f_RRy = 0.
      if self.f_RRz is None:
        self.f_RRz = 0.
      if self.ax is None:
        self.ax = 0.
      if self.ay is None:
        self.ay = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.pose = geometry_msgs.msg.Pose()
      self.Vx = 0.
      self.Vy = 0.
      self.r = 0.
      self.omegaF = 0.
      self.omegaR = 0.
      self.throttle = 0.
      self.turn = 0.
      self.x_center = 0.
      self.y_center = 0.
      self.R = 0.
      self.f_FLx = 0.
      self.f_FLy = 0.
      self.f_FLz = 0.
      self.f_FRx = 0.
      self.f_FRy = 0.
      self.f_FRz = 0.
      self.f_RLx = 0.
      self.f_RLy = 0.
      self.f_RLz = 0.
      self.f_RRx = 0.
      self.f_RRy = 0.
      self.f_RRz = 0.
      self.ax = 0.
      self.ay = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_31d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.Vx, _x.Vy, _x.r, _x.omegaF, _x.omegaR, _x.throttle, _x.turn, _x.x_center, _x.y_center, _x.R, _x.f_FLx, _x.f_FLy, _x.f_FLz, _x.f_FRx, _x.f_FRy, _x.f_FRz, _x.f_RLx, _x.f_RLy, _x.f_RLz, _x.f_RRx, _x.f_RRy, _x.f_RRz, _x.ax, _x.ay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 248
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.Vx, _x.Vy, _x.r, _x.omegaF, _x.omegaR, _x.throttle, _x.turn, _x.x_center, _x.y_center, _x.R, _x.f_FLx, _x.f_FLy, _x.f_FLz, _x.f_FRx, _x.f_FRy, _x.f_FRz, _x.f_RLx, _x.f_RLy, _x.f_RLz, _x.f_RRx, _x.f_RRy, _x.f_RRz, _x.ax, _x.ay,) = _get_struct_31d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_31d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.Vx, _x.Vy, _x.r, _x.omegaF, _x.omegaR, _x.throttle, _x.turn, _x.x_center, _x.y_center, _x.R, _x.f_FLx, _x.f_FLy, _x.f_FLz, _x.f_FRx, _x.f_FRy, _x.f_FRz, _x.f_RLx, _x.f_RLy, _x.f_RLz, _x.f_RRx, _x.f_RRy, _x.f_RRz, _x.ax, _x.ay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 248
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.Vx, _x.Vy, _x.r, _x.omegaF, _x.omegaR, _x.throttle, _x.turn, _x.x_center, _x.y_center, _x.R, _x.f_FLx, _x.f_FLy, _x.f_FLz, _x.f_FRx, _x.f_FRy, _x.f_FRz, _x.f_RLx, _x.f_RLy, _x.f_RLz, _x.f_RRx, _x.f_RRy, _x.f_RRz, _x.ax, _x.ay,) = _get_struct_31d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_31d = None
def _get_struct_31d():
    global _struct_31d
    if _struct_31d is None:
        _struct_31d = struct.Struct("<31d")
    return _struct_31d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
