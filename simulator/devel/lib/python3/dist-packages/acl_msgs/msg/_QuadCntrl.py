# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/QuadCntrl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class QuadCntrl(genpy.Message):
  _md5sum = "73822b1fb2aea2756d0f5f88004413c3"
  _type = "acl_msgs/QuadCntrl"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
geometry_msgs/Pose pose
geometry_msgs/Pose pose_actual
geometry_msgs/Twist twist
geometry_msgs/Twist twist_actual
geometry_msgs/Vector3 rpy
geometry_msgs/Vector3 rpy_actual
geometry_msgs/Vector3 accel
geometry_msgs/Vector3 accel_fb
geometry_msgs/Vector3 jerk
geometry_msgs/Vector3 jerk_fb
geometry_msgs/Vector3 pos_integrator
geometry_msgs/Vector3 vel_integrator
geometry_msgs/Vector3 s
geometry_msgs/Vector3 c
geometry_msgs/Vector3 phi
geometry_msgs/Vector3 phi_m
float64 u
float64 a
float64 b
float64 yaw
float64 f_total
float64 throttle
int16 att_status
float64 vicon_time

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','pose','pose_actual','twist','twist_actual','rpy','rpy_actual','accel','accel_fb','jerk','jerk_fb','pos_integrator','vel_integrator','s','c','phi','phi_m','u','a','b','yaw','f_total','throttle','att_status','vicon_time']
  _slot_types = ['std_msgs/Header','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64','float64','float64','float64','float64','int16','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,pose,pose_actual,twist,twist_actual,rpy,rpy_actual,accel,accel_fb,jerk,jerk_fb,pos_integrator,vel_integrator,s,c,phi,phi_m,u,a,b,yaw,f_total,throttle,att_status,vicon_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QuadCntrl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.pose_actual is None:
        self.pose_actual = geometry_msgs.msg.Pose()
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
      if self.twist_actual is None:
        self.twist_actual = geometry_msgs.msg.Twist()
      if self.rpy is None:
        self.rpy = geometry_msgs.msg.Vector3()
      if self.rpy_actual is None:
        self.rpy_actual = geometry_msgs.msg.Vector3()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.accel_fb is None:
        self.accel_fb = geometry_msgs.msg.Vector3()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Vector3()
      if self.jerk_fb is None:
        self.jerk_fb = geometry_msgs.msg.Vector3()
      if self.pos_integrator is None:
        self.pos_integrator = geometry_msgs.msg.Vector3()
      if self.vel_integrator is None:
        self.vel_integrator = geometry_msgs.msg.Vector3()
      if self.s is None:
        self.s = geometry_msgs.msg.Vector3()
      if self.c is None:
        self.c = geometry_msgs.msg.Vector3()
      if self.phi is None:
        self.phi = geometry_msgs.msg.Vector3()
      if self.phi_m is None:
        self.phi_m = geometry_msgs.msg.Vector3()
      if self.u is None:
        self.u = 0.
      if self.a is None:
        self.a = 0.
      if self.b is None:
        self.b = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.f_total is None:
        self.f_total = 0.
      if self.throttle is None:
        self.throttle = 0.
      if self.att_status is None:
        self.att_status = 0
      if self.vicon_time is None:
        self.vicon_time = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.pose = geometry_msgs.msg.Pose()
      self.pose_actual = geometry_msgs.msg.Pose()
      self.twist = geometry_msgs.msg.Twist()
      self.twist_actual = geometry_msgs.msg.Twist()
      self.rpy = geometry_msgs.msg.Vector3()
      self.rpy_actual = geometry_msgs.msg.Vector3()
      self.accel = geometry_msgs.msg.Vector3()
      self.accel_fb = geometry_msgs.msg.Vector3()
      self.jerk = geometry_msgs.msg.Vector3()
      self.jerk_fb = geometry_msgs.msg.Vector3()
      self.pos_integrator = geometry_msgs.msg.Vector3()
      self.vel_integrator = geometry_msgs.msg.Vector3()
      self.s = geometry_msgs.msg.Vector3()
      self.c = geometry_msgs.msg.Vector3()
      self.phi = geometry_msgs.msg.Vector3()
      self.phi_m = geometry_msgs.msg.Vector3()
      self.u = 0.
      self.a = 0.
      self.b = 0.
      self.yaw = 0.
      self.f_total = 0.
      self.throttle = 0.
      self.att_status = 0
      self.vicon_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_68dhd().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pose_actual.position.x, _x.pose_actual.position.y, _x.pose_actual.position.z, _x.pose_actual.orientation.x, _x.pose_actual.orientation.y, _x.pose_actual.orientation.z, _x.pose_actual.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z, _x.twist_actual.linear.x, _x.twist_actual.linear.y, _x.twist_actual.linear.z, _x.twist_actual.angular.x, _x.twist_actual.angular.y, _x.twist_actual.angular.z, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.rpy_actual.x, _x.rpy_actual.y, _x.rpy_actual.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel_fb.x, _x.accel_fb.y, _x.accel_fb.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.jerk_fb.x, _x.jerk_fb.y, _x.jerk_fb.z, _x.pos_integrator.x, _x.pos_integrator.y, _x.pos_integrator.z, _x.vel_integrator.x, _x.vel_integrator.y, _x.vel_integrator.z, _x.s.x, _x.s.y, _x.s.z, _x.c.x, _x.c.y, _x.c.z, _x.phi.x, _x.phi.y, _x.phi.z, _x.phi_m.x, _x.phi_m.y, _x.phi_m.z, _x.u, _x.a, _x.b, _x.yaw, _x.f_total, _x.throttle, _x.att_status, _x.vicon_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.pose_actual is None:
        self.pose_actual = geometry_msgs.msg.Pose()
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
      if self.twist_actual is None:
        self.twist_actual = geometry_msgs.msg.Twist()
      if self.rpy is None:
        self.rpy = geometry_msgs.msg.Vector3()
      if self.rpy_actual is None:
        self.rpy_actual = geometry_msgs.msg.Vector3()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.accel_fb is None:
        self.accel_fb = geometry_msgs.msg.Vector3()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Vector3()
      if self.jerk_fb is None:
        self.jerk_fb = geometry_msgs.msg.Vector3()
      if self.pos_integrator is None:
        self.pos_integrator = geometry_msgs.msg.Vector3()
      if self.vel_integrator is None:
        self.vel_integrator = geometry_msgs.msg.Vector3()
      if self.s is None:
        self.s = geometry_msgs.msg.Vector3()
      if self.c is None:
        self.c = geometry_msgs.msg.Vector3()
      if self.phi is None:
        self.phi = geometry_msgs.msg.Vector3()
      if self.phi_m is None:
        self.phi_m = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 554
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pose_actual.position.x, _x.pose_actual.position.y, _x.pose_actual.position.z, _x.pose_actual.orientation.x, _x.pose_actual.orientation.y, _x.pose_actual.orientation.z, _x.pose_actual.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z, _x.twist_actual.linear.x, _x.twist_actual.linear.y, _x.twist_actual.linear.z, _x.twist_actual.angular.x, _x.twist_actual.angular.y, _x.twist_actual.angular.z, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.rpy_actual.x, _x.rpy_actual.y, _x.rpy_actual.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel_fb.x, _x.accel_fb.y, _x.accel_fb.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.jerk_fb.x, _x.jerk_fb.y, _x.jerk_fb.z, _x.pos_integrator.x, _x.pos_integrator.y, _x.pos_integrator.z, _x.vel_integrator.x, _x.vel_integrator.y, _x.vel_integrator.z, _x.s.x, _x.s.y, _x.s.z, _x.c.x, _x.c.y, _x.c.z, _x.phi.x, _x.phi.y, _x.phi.z, _x.phi_m.x, _x.phi_m.y, _x.phi_m.z, _x.u, _x.a, _x.b, _x.yaw, _x.f_total, _x.throttle, _x.att_status, _x.vicon_time,) = _get_struct_68dhd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_68dhd().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pose_actual.position.x, _x.pose_actual.position.y, _x.pose_actual.position.z, _x.pose_actual.orientation.x, _x.pose_actual.orientation.y, _x.pose_actual.orientation.z, _x.pose_actual.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z, _x.twist_actual.linear.x, _x.twist_actual.linear.y, _x.twist_actual.linear.z, _x.twist_actual.angular.x, _x.twist_actual.angular.y, _x.twist_actual.angular.z, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.rpy_actual.x, _x.rpy_actual.y, _x.rpy_actual.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel_fb.x, _x.accel_fb.y, _x.accel_fb.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.jerk_fb.x, _x.jerk_fb.y, _x.jerk_fb.z, _x.pos_integrator.x, _x.pos_integrator.y, _x.pos_integrator.z, _x.vel_integrator.x, _x.vel_integrator.y, _x.vel_integrator.z, _x.s.x, _x.s.y, _x.s.z, _x.c.x, _x.c.y, _x.c.z, _x.phi.x, _x.phi.y, _x.phi.z, _x.phi_m.x, _x.phi_m.y, _x.phi_m.z, _x.u, _x.a, _x.b, _x.yaw, _x.f_total, _x.throttle, _x.att_status, _x.vicon_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.pose_actual is None:
        self.pose_actual = geometry_msgs.msg.Pose()
      if self.twist is None:
        self.twist = geometry_msgs.msg.Twist()
      if self.twist_actual is None:
        self.twist_actual = geometry_msgs.msg.Twist()
      if self.rpy is None:
        self.rpy = geometry_msgs.msg.Vector3()
      if self.rpy_actual is None:
        self.rpy_actual = geometry_msgs.msg.Vector3()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.accel_fb is None:
        self.accel_fb = geometry_msgs.msg.Vector3()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Vector3()
      if self.jerk_fb is None:
        self.jerk_fb = geometry_msgs.msg.Vector3()
      if self.pos_integrator is None:
        self.pos_integrator = geometry_msgs.msg.Vector3()
      if self.vel_integrator is None:
        self.vel_integrator = geometry_msgs.msg.Vector3()
      if self.s is None:
        self.s = geometry_msgs.msg.Vector3()
      if self.c is None:
        self.c = geometry_msgs.msg.Vector3()
      if self.phi is None:
        self.phi = geometry_msgs.msg.Vector3()
      if self.phi_m is None:
        self.phi_m = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 554
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pose_actual.position.x, _x.pose_actual.position.y, _x.pose_actual.position.z, _x.pose_actual.orientation.x, _x.pose_actual.orientation.y, _x.pose_actual.orientation.z, _x.pose_actual.orientation.w, _x.twist.linear.x, _x.twist.linear.y, _x.twist.linear.z, _x.twist.angular.x, _x.twist.angular.y, _x.twist.angular.z, _x.twist_actual.linear.x, _x.twist_actual.linear.y, _x.twist_actual.linear.z, _x.twist_actual.angular.x, _x.twist_actual.angular.y, _x.twist_actual.angular.z, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.rpy_actual.x, _x.rpy_actual.y, _x.rpy_actual.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel_fb.x, _x.accel_fb.y, _x.accel_fb.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.jerk_fb.x, _x.jerk_fb.y, _x.jerk_fb.z, _x.pos_integrator.x, _x.pos_integrator.y, _x.pos_integrator.z, _x.vel_integrator.x, _x.vel_integrator.y, _x.vel_integrator.z, _x.s.x, _x.s.y, _x.s.z, _x.c.x, _x.c.y, _x.c.z, _x.phi.x, _x.phi.y, _x.phi.z, _x.phi_m.x, _x.phi_m.y, _x.phi_m.z, _x.u, _x.a, _x.b, _x.yaw, _x.f_total, _x.throttle, _x.att_status, _x.vicon_time,) = _get_struct_68dhd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_68dhd = None
def _get_struct_68dhd():
    global _struct_68dhd
    if _struct_68dhd is None:
        _struct_68dhd = struct.Struct("<68dhd")
    return _struct_68dhd
