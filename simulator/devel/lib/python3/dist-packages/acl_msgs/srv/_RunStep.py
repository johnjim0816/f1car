# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/RunStepRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import acl_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class RunStepRequest(genpy.Message):
  _md5sum = "f634abab07f1c51e2876bb6e2831ae17"
  _type = "acl_msgs/RunStepRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """acl_msgs/CarState startState
float64 dt
float64 omegaDes
float64 turn
bool showVis

================================================================================
MSG: acl_msgs/CarState
Header header
geometry_msgs/Pose pose
float64 Vx
float64 Vy
float64 r
float64 omegaF
float64 omegaR
float64 throttle
float64 turn
float64 x_center
float64 y_center
float64 R
float64 f_FLx
float64 f_FLy
float64 f_FLz
float64 f_FRx
float64 f_FRy
float64 f_FRz
float64 f_RLx
float64 f_RLy
float64 f_RLz
float64 f_RRx
float64 f_RRy
float64 f_RRz
float64 ax
float64 ay

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['startState','dt','omegaDes','turn','showVis']
  _slot_types = ['acl_msgs/CarState','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       startState,dt,omegaDes,turn,showVis

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RunStepRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.startState is None:
        self.startState = acl_msgs.msg.CarState()
      if self.dt is None:
        self.dt = 0.
      if self.omegaDes is None:
        self.omegaDes = 0.
      if self.turn is None:
        self.turn = 0.
      if self.showVis is None:
        self.showVis = False
    else:
      self.startState = acl_msgs.msg.CarState()
      self.dt = 0.
      self.omegaDes = 0.
      self.turn = 0.
      self.showVis = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.startState.header.seq, _x.startState.header.stamp.secs, _x.startState.header.stamp.nsecs))
      _x = self.startState.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_34dB().pack(_x.startState.pose.position.x, _x.startState.pose.position.y, _x.startState.pose.position.z, _x.startState.pose.orientation.x, _x.startState.pose.orientation.y, _x.startState.pose.orientation.z, _x.startState.pose.orientation.w, _x.startState.Vx, _x.startState.Vy, _x.startState.r, _x.startState.omegaF, _x.startState.omegaR, _x.startState.throttle, _x.startState.turn, _x.startState.x_center, _x.startState.y_center, _x.startState.R, _x.startState.f_FLx, _x.startState.f_FLy, _x.startState.f_FLz, _x.startState.f_FRx, _x.startState.f_FRy, _x.startState.f_FRz, _x.startState.f_RLx, _x.startState.f_RLy, _x.startState.f_RLz, _x.startState.f_RRx, _x.startState.f_RRy, _x.startState.f_RRz, _x.startState.ax, _x.startState.ay, _x.dt, _x.omegaDes, _x.turn, _x.showVis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.startState is None:
        self.startState = acl_msgs.msg.CarState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.startState.header.seq, _x.startState.header.stamp.secs, _x.startState.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.startState.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.startState.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 273
      (_x.startState.pose.position.x, _x.startState.pose.position.y, _x.startState.pose.position.z, _x.startState.pose.orientation.x, _x.startState.pose.orientation.y, _x.startState.pose.orientation.z, _x.startState.pose.orientation.w, _x.startState.Vx, _x.startState.Vy, _x.startState.r, _x.startState.omegaF, _x.startState.omegaR, _x.startState.throttle, _x.startState.turn, _x.startState.x_center, _x.startState.y_center, _x.startState.R, _x.startState.f_FLx, _x.startState.f_FLy, _x.startState.f_FLz, _x.startState.f_FRx, _x.startState.f_FRy, _x.startState.f_FRz, _x.startState.f_RLx, _x.startState.f_RLy, _x.startState.f_RLz, _x.startState.f_RRx, _x.startState.f_RRy, _x.startState.f_RRz, _x.startState.ax, _x.startState.ay, _x.dt, _x.omegaDes, _x.turn, _x.showVis,) = _get_struct_34dB().unpack(str[start:end])
      self.showVis = bool(self.showVis)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.startState.header.seq, _x.startState.header.stamp.secs, _x.startState.header.stamp.nsecs))
      _x = self.startState.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_34dB().pack(_x.startState.pose.position.x, _x.startState.pose.position.y, _x.startState.pose.position.z, _x.startState.pose.orientation.x, _x.startState.pose.orientation.y, _x.startState.pose.orientation.z, _x.startState.pose.orientation.w, _x.startState.Vx, _x.startState.Vy, _x.startState.r, _x.startState.omegaF, _x.startState.omegaR, _x.startState.throttle, _x.startState.turn, _x.startState.x_center, _x.startState.y_center, _x.startState.R, _x.startState.f_FLx, _x.startState.f_FLy, _x.startState.f_FLz, _x.startState.f_FRx, _x.startState.f_FRy, _x.startState.f_FRz, _x.startState.f_RLx, _x.startState.f_RLy, _x.startState.f_RLz, _x.startState.f_RRx, _x.startState.f_RRy, _x.startState.f_RRz, _x.startState.ax, _x.startState.ay, _x.dt, _x.omegaDes, _x.turn, _x.showVis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.startState is None:
        self.startState = acl_msgs.msg.CarState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.startState.header.seq, _x.startState.header.stamp.secs, _x.startState.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.startState.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.startState.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 273
      (_x.startState.pose.position.x, _x.startState.pose.position.y, _x.startState.pose.position.z, _x.startState.pose.orientation.x, _x.startState.pose.orientation.y, _x.startState.pose.orientation.z, _x.startState.pose.orientation.w, _x.startState.Vx, _x.startState.Vy, _x.startState.r, _x.startState.omegaF, _x.startState.omegaR, _x.startState.throttle, _x.startState.turn, _x.startState.x_center, _x.startState.y_center, _x.startState.R, _x.startState.f_FLx, _x.startState.f_FLy, _x.startState.f_FLz, _x.startState.f_FRx, _x.startState.f_FRy, _x.startState.f_FRz, _x.startState.f_RLx, _x.startState.f_RLy, _x.startState.f_RLz, _x.startState.f_RRx, _x.startState.f_RRy, _x.startState.f_RRz, _x.startState.ax, _x.startState.ay, _x.dt, _x.omegaDes, _x.turn, _x.showVis,) = _get_struct_34dB().unpack(str[start:end])
      self.showVis = bool(self.showVis)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_34dB = None
def _get_struct_34dB():
    global _struct_34dB
    if _struct_34dB is None:
        _struct_34dB = struct.Struct("<34dB")
    return _struct_34dB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/RunStepResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import acl_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class RunStepResponse(genpy.Message):
  _md5sum = "82f383bafb8f242654e9f9af2ccea093"
  _type = "acl_msgs/RunStepResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """acl_msgs/CarState finalState


================================================================================
MSG: acl_msgs/CarState
Header header
geometry_msgs/Pose pose
float64 Vx
float64 Vy
float64 r
float64 omegaF
float64 omegaR
float64 throttle
float64 turn
float64 x_center
float64 y_center
float64 R
float64 f_FLx
float64 f_FLy
float64 f_FLz
float64 f_FRx
float64 f_FRy
float64 f_FRz
float64 f_RLx
float64 f_RLy
float64 f_RLz
float64 f_RRx
float64 f_RRy
float64 f_RRz
float64 ax
float64 ay

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['finalState']
  _slot_types = ['acl_msgs/CarState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       finalState

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RunStepResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.finalState is None:
        self.finalState = acl_msgs.msg.CarState()
    else:
      self.finalState = acl_msgs.msg.CarState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.finalState.header.seq, _x.finalState.header.stamp.secs, _x.finalState.header.stamp.nsecs))
      _x = self.finalState.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_31d().pack(_x.finalState.pose.position.x, _x.finalState.pose.position.y, _x.finalState.pose.position.z, _x.finalState.pose.orientation.x, _x.finalState.pose.orientation.y, _x.finalState.pose.orientation.z, _x.finalState.pose.orientation.w, _x.finalState.Vx, _x.finalState.Vy, _x.finalState.r, _x.finalState.omegaF, _x.finalState.omegaR, _x.finalState.throttle, _x.finalState.turn, _x.finalState.x_center, _x.finalState.y_center, _x.finalState.R, _x.finalState.f_FLx, _x.finalState.f_FLy, _x.finalState.f_FLz, _x.finalState.f_FRx, _x.finalState.f_FRy, _x.finalState.f_FRz, _x.finalState.f_RLx, _x.finalState.f_RLy, _x.finalState.f_RLz, _x.finalState.f_RRx, _x.finalState.f_RRy, _x.finalState.f_RRz, _x.finalState.ax, _x.finalState.ay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.finalState is None:
        self.finalState = acl_msgs.msg.CarState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.finalState.header.seq, _x.finalState.header.stamp.secs, _x.finalState.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.finalState.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.finalState.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 248
      (_x.finalState.pose.position.x, _x.finalState.pose.position.y, _x.finalState.pose.position.z, _x.finalState.pose.orientation.x, _x.finalState.pose.orientation.y, _x.finalState.pose.orientation.z, _x.finalState.pose.orientation.w, _x.finalState.Vx, _x.finalState.Vy, _x.finalState.r, _x.finalState.omegaF, _x.finalState.omegaR, _x.finalState.throttle, _x.finalState.turn, _x.finalState.x_center, _x.finalState.y_center, _x.finalState.R, _x.finalState.f_FLx, _x.finalState.f_FLy, _x.finalState.f_FLz, _x.finalState.f_FRx, _x.finalState.f_FRy, _x.finalState.f_FRz, _x.finalState.f_RLx, _x.finalState.f_RLy, _x.finalState.f_RLz, _x.finalState.f_RRx, _x.finalState.f_RRy, _x.finalState.f_RRz, _x.finalState.ax, _x.finalState.ay,) = _get_struct_31d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.finalState.header.seq, _x.finalState.header.stamp.secs, _x.finalState.header.stamp.nsecs))
      _x = self.finalState.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_31d().pack(_x.finalState.pose.position.x, _x.finalState.pose.position.y, _x.finalState.pose.position.z, _x.finalState.pose.orientation.x, _x.finalState.pose.orientation.y, _x.finalState.pose.orientation.z, _x.finalState.pose.orientation.w, _x.finalState.Vx, _x.finalState.Vy, _x.finalState.r, _x.finalState.omegaF, _x.finalState.omegaR, _x.finalState.throttle, _x.finalState.turn, _x.finalState.x_center, _x.finalState.y_center, _x.finalState.R, _x.finalState.f_FLx, _x.finalState.f_FLy, _x.finalState.f_FLz, _x.finalState.f_FRx, _x.finalState.f_FRy, _x.finalState.f_FRz, _x.finalState.f_RLx, _x.finalState.f_RLy, _x.finalState.f_RLz, _x.finalState.f_RRx, _x.finalState.f_RRy, _x.finalState.f_RRz, _x.finalState.ax, _x.finalState.ay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.finalState is None:
        self.finalState = acl_msgs.msg.CarState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.finalState.header.seq, _x.finalState.header.stamp.secs, _x.finalState.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.finalState.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.finalState.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 248
      (_x.finalState.pose.position.x, _x.finalState.pose.position.y, _x.finalState.pose.position.z, _x.finalState.pose.orientation.x, _x.finalState.pose.orientation.y, _x.finalState.pose.orientation.z, _x.finalState.pose.orientation.w, _x.finalState.Vx, _x.finalState.Vy, _x.finalState.r, _x.finalState.omegaF, _x.finalState.omegaR, _x.finalState.throttle, _x.finalState.turn, _x.finalState.x_center, _x.finalState.y_center, _x.finalState.R, _x.finalState.f_FLx, _x.finalState.f_FLy, _x.finalState.f_FLz, _x.finalState.f_FRx, _x.finalState.f_FRy, _x.finalState.f_FRz, _x.finalState.f_RLx, _x.finalState.f_RLy, _x.finalState.f_RLz, _x.finalState.f_RRx, _x.finalState.f_RRy, _x.finalState.f_RRz, _x.finalState.ax, _x.finalState.ay,) = _get_struct_31d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_31d = None
def _get_struct_31d():
    global _struct_31d
    if _struct_31d is None:
        _struct_31d = struct.Struct("<31d")
    return _struct_31d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
class RunStep(object):
  _type          = 'acl_msgs/RunStep'
  _md5sum = '217689ad4ccf0382c4356aba3735d2cb'
  _request_class  = RunStepRequest
  _response_class = RunStepResponse
