# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/SingleSegmentRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import acl_msgs.msg

class SingleSegmentRequest(genpy.Message):
  _md5sum = "23960faeeb6a988afa5a44d232a1bb47"
  _type = "acl_msgs/SingleSegmentRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """acl_msgs/SimpleState s
float64 r
float64 v
bool reset_state
bool use_start_state
int64 d

================================================================================
MSG: acl_msgs/SimpleState
int64 segment
float64 x
float64 y
float64 psi
float64 omega
float64 Vx
float64 Vy
float64 psidot
int64 slipping
float64 prev_radius"""
  __slots__ = ['s','r','v','reset_state','use_start_state','d']
  _slot_types = ['acl_msgs/SimpleState','float64','float64','bool','bool','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       s,r,v,reset_state,use_start_state,d

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SingleSegmentRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.s is None:
        self.s = acl_msgs.msg.SimpleState()
      if self.r is None:
        self.r = 0.
      if self.v is None:
        self.v = 0.
      if self.reset_state is None:
        self.reset_state = False
      if self.use_start_state is None:
        self.use_start_state = False
      if self.d is None:
        self.d = 0
    else:
      self.s = acl_msgs.msg.SimpleState()
      self.r = 0.
      self.v = 0.
      self.reset_state = False
      self.use_start_state = False
      self.d = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q7dq3d2Bq().pack(_x.s.segment, _x.s.x, _x.s.y, _x.s.psi, _x.s.omega, _x.s.Vx, _x.s.Vy, _x.s.psidot, _x.s.slipping, _x.s.prev_radius, _x.r, _x.v, _x.reset_state, _x.use_start_state, _x.d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.s is None:
        self.s = acl_msgs.msg.SimpleState()
      end = 0
      _x = self
      start = end
      end += 106
      (_x.s.segment, _x.s.x, _x.s.y, _x.s.psi, _x.s.omega, _x.s.Vx, _x.s.Vy, _x.s.psidot, _x.s.slipping, _x.s.prev_radius, _x.r, _x.v, _x.reset_state, _x.use_start_state, _x.d,) = _get_struct_q7dq3d2Bq().unpack(str[start:end])
      self.reset_state = bool(self.reset_state)
      self.use_start_state = bool(self.use_start_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q7dq3d2Bq().pack(_x.s.segment, _x.s.x, _x.s.y, _x.s.psi, _x.s.omega, _x.s.Vx, _x.s.Vy, _x.s.psidot, _x.s.slipping, _x.s.prev_radius, _x.r, _x.v, _x.reset_state, _x.use_start_state, _x.d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.s is None:
        self.s = acl_msgs.msg.SimpleState()
      end = 0
      _x = self
      start = end
      end += 106
      (_x.s.segment, _x.s.x, _x.s.y, _x.s.psi, _x.s.omega, _x.s.Vx, _x.s.Vy, _x.s.psidot, _x.s.slipping, _x.s.prev_radius, _x.r, _x.v, _x.reset_state, _x.use_start_state, _x.d,) = _get_struct_q7dq3d2Bq().unpack(str[start:end])
      self.reset_state = bool(self.reset_state)
      self.use_start_state = bool(self.use_start_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q7dq3d2Bq = None
def _get_struct_q7dq3d2Bq():
    global _struct_q7dq3d2Bq
    if _struct_q7dq3d2Bq is None:
        _struct_q7dq3d2Bq = struct.Struct("<q7dq3d2Bq")
    return _struct_q7dq3d2Bq
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/SingleSegmentResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import acl_msgs.msg

class SingleSegmentResponse(genpy.Message):
  _md5sum = "41dd1d4e0b5c0314f399194025f2022f"
  _type = "acl_msgs/SingleSegmentResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """acl_msgs/SimpleState s_prime
float64 reward

================================================================================
MSG: acl_msgs/SimpleState
int64 segment
float64 x
float64 y
float64 psi
float64 omega
float64 Vx
float64 Vy
float64 psidot
int64 slipping
float64 prev_radius"""
  __slots__ = ['s_prime','reward']
  _slot_types = ['acl_msgs/SimpleState','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       s_prime,reward

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SingleSegmentResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.s_prime is None:
        self.s_prime = acl_msgs.msg.SimpleState()
      if self.reward is None:
        self.reward = 0.
    else:
      self.s_prime = acl_msgs.msg.SimpleState()
      self.reward = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q7dq2d().pack(_x.s_prime.segment, _x.s_prime.x, _x.s_prime.y, _x.s_prime.psi, _x.s_prime.omega, _x.s_prime.Vx, _x.s_prime.Vy, _x.s_prime.psidot, _x.s_prime.slipping, _x.s_prime.prev_radius, _x.reward))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.s_prime is None:
        self.s_prime = acl_msgs.msg.SimpleState()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.s_prime.segment, _x.s_prime.x, _x.s_prime.y, _x.s_prime.psi, _x.s_prime.omega, _x.s_prime.Vx, _x.s_prime.Vy, _x.s_prime.psidot, _x.s_prime.slipping, _x.s_prime.prev_radius, _x.reward,) = _get_struct_q7dq2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q7dq2d().pack(_x.s_prime.segment, _x.s_prime.x, _x.s_prime.y, _x.s_prime.psi, _x.s_prime.omega, _x.s_prime.Vx, _x.s_prime.Vy, _x.s_prime.psidot, _x.s_prime.slipping, _x.s_prime.prev_radius, _x.reward))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.s_prime is None:
        self.s_prime = acl_msgs.msg.SimpleState()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.s_prime.segment, _x.s_prime.x, _x.s_prime.y, _x.s_prime.psi, _x.s_prime.omega, _x.s_prime.Vx, _x.s_prime.Vy, _x.s_prime.psidot, _x.s_prime.slipping, _x.s_prime.prev_radius, _x.reward,) = _get_struct_q7dq2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q7dq2d = None
def _get_struct_q7dq2d():
    global _struct_q7dq2d
    if _struct_q7dq2d is None:
        _struct_q7dq2d = struct.Struct("<q7dq2d")
    return _struct_q7dq2d
class SingleSegment(object):
  _type          = 'acl_msgs/SingleSegment'
  _md5sum = 'c66573959adcbfed1484944f69febdbb'
  _request_class  = SingleSegmentRequest
  _response_class = SingleSegmentResponse
