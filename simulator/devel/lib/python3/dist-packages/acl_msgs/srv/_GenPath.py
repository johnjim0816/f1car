# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/GenPathRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class GenPathRequest(genpy.Message):
  _md5sum = "acbaa095a36e3ec458f23d58e640173a"
  _type = "acl_msgs/GenPathRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 N # note: including N here is a little redundant as it can be inferred from the dimension of the input vectors.  However, it is useful for error checking.
uint16 numD
float64 T
float64 h
float64 R
geometry_msgs/Vector3[] p0
geometry_msgs/Vector3[] v0
geometry_msgs/Vector3[] a0
geometry_msgs/Vector3[] p1
geometry_msgs/Vector3[] v1
geometry_msgs/Vector3[] a1
geometry_msgs/Vector3[] obstacles

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['N','numD','T','h','R','p0','v0','a0','p1','v1','a1','obstacles']
  _slot_types = ['uint16','uint16','float64','float64','float64','geometry_msgs/Vector3[]','geometry_msgs/Vector3[]','geometry_msgs/Vector3[]','geometry_msgs/Vector3[]','geometry_msgs/Vector3[]','geometry_msgs/Vector3[]','geometry_msgs/Vector3[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       N,numD,T,h,R,p0,v0,a0,p1,v1,a1,obstacles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GenPathRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.N is None:
        self.N = 0
      if self.numD is None:
        self.numD = 0
      if self.T is None:
        self.T = 0.
      if self.h is None:
        self.h = 0.
      if self.R is None:
        self.R = 0.
      if self.p0 is None:
        self.p0 = []
      if self.v0 is None:
        self.v0 = []
      if self.a0 is None:
        self.a0 = []
      if self.p1 is None:
        self.p1 = []
      if self.v1 is None:
        self.v1 = []
      if self.a1 is None:
        self.a1 = []
      if self.obstacles is None:
        self.obstacles = []
    else:
      self.N = 0
      self.numD = 0
      self.T = 0.
      self.h = 0.
      self.R = 0.
      self.p0 = []
      self.v0 = []
      self.a0 = []
      self.p1 = []
      self.v1 = []
      self.a1 = []
      self.obstacles = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2H3d().pack(_x.N, _x.numD, _x.T, _x.h, _x.R))
      length = len(self.p0)
      buff.write(_struct_I.pack(length))
      for val1 in self.p0:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.v0)
      buff.write(_struct_I.pack(length))
      for val1 in self.v0:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.a0)
      buff.write(_struct_I.pack(length))
      for val1 in self.a0:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.p1)
      buff.write(_struct_I.pack(length))
      for val1 in self.p1:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.v1)
      buff.write(_struct_I.pack(length))
      for val1 in self.v1:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.a1)
      buff.write(_struct_I.pack(length))
      for val1 in self.a1:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.p0 is None:
        self.p0 = None
      if self.v0 is None:
        self.v0 = None
      if self.a0 is None:
        self.a0 = None
      if self.p1 is None:
        self.p1 = None
      if self.v1 is None:
        self.v1 = None
      if self.a1 is None:
        self.a1 = None
      if self.obstacles is None:
        self.obstacles = None
      end = 0
      _x = self
      start = end
      end += 28
      (_x.N, _x.numD, _x.T, _x.h, _x.R,) = _get_struct_2H3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.p0 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.p0.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.v0 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.v0.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.a0 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.a0.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.p1 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.p1.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.v1 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.v1.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.a1 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.a1.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.obstacles.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2H3d().pack(_x.N, _x.numD, _x.T, _x.h, _x.R))
      length = len(self.p0)
      buff.write(_struct_I.pack(length))
      for val1 in self.p0:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.v0)
      buff.write(_struct_I.pack(length))
      for val1 in self.v0:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.a0)
      buff.write(_struct_I.pack(length))
      for val1 in self.a0:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.p1)
      buff.write(_struct_I.pack(length))
      for val1 in self.p1:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.v1)
      buff.write(_struct_I.pack(length))
      for val1 in self.v1:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.a1)
      buff.write(_struct_I.pack(length))
      for val1 in self.a1:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.p0 is None:
        self.p0 = None
      if self.v0 is None:
        self.v0 = None
      if self.a0 is None:
        self.a0 = None
      if self.p1 is None:
        self.p1 = None
      if self.v1 is None:
        self.v1 = None
      if self.a1 is None:
        self.a1 = None
      if self.obstacles is None:
        self.obstacles = None
      end = 0
      _x = self
      start = end
      end += 28
      (_x.N, _x.numD, _x.T, _x.h, _x.R,) = _get_struct_2H3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.p0 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.p0.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.v0 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.v0.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.a0 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.a0.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.p1 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.p1.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.v1 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.v1.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.a1 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.a1.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.obstacles.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H3d = None
def _get_struct_2H3d():
    global _struct_2H3d
    if _struct_2H3d is None:
        _struct_2H3d = struct.Struct("<2H3d")
    return _struct_2H3d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/GenPathResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import acl_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class GenPathResponse(genpy.Message):
  _md5sum = "1e085ee622b655aac7b4faba7e23870b"
  _type = "acl_msgs/GenPathResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """acl_msgs/Trajectory[] trajectories
bool converged

================================================================================
MSG: acl_msgs/Trajectory
Header header
geometry_msgs/Vector3Stamped[] pos
geometry_msgs/Vector3Stamped[] vel
geometry_msgs/Vector3Stamped[] acc
geometry_msgs/Vector3Stamped[] jerk


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['trajectories','converged']
  _slot_types = ['acl_msgs/Trajectory[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectories,converged

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GenPathResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trajectories is None:
        self.trajectories = []
      if self.converged is None:
        self.converged = False
    else:
      self.trajectories = []
      self.converged = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.pos)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pos:
          _v3 = val2.header
          _x = _v3.seq
          buff.write(_get_struct_I().pack(_x))
          _v4 = _v3.stamp
          _x = _v4
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v3.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v5 = val2.vector
          _x = _v5
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.vel)
        buff.write(_struct_I.pack(length))
        for val2 in val1.vel:
          _v6 = val2.header
          _x = _v6.seq
          buff.write(_get_struct_I().pack(_x))
          _v7 = _v6.stamp
          _x = _v7
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v6.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v8 = val2.vector
          _x = _v8
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.acc)
        buff.write(_struct_I.pack(length))
        for val2 in val1.acc:
          _v9 = val2.header
          _x = _v9.seq
          buff.write(_get_struct_I().pack(_x))
          _v10 = _v9.stamp
          _x = _v10
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v9.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v11 = val2.vector
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.jerk)
        buff.write(_struct_I.pack(length))
        for val2 in val1.jerk:
          _v12 = val2.header
          _x = _v12.seq
          buff.write(_get_struct_I().pack(_x))
          _v13 = _v12.stamp
          _x = _v13
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v12.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v14 = val2.vector
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.converged
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectories is None:
        self.trajectories = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories = []
      for i in range(0, length):
        val1 = acl_msgs.msg.Trajectory()
        _v15 = val1.header
        start = end
        end += 4
        (_v15.seq,) = _get_struct_I().unpack(str[start:end])
        _v16 = _v15.stamp
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v15.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pos = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3Stamped()
          _v17 = val2.header
          start = end
          end += 4
          (_v17.seq,) = _get_struct_I().unpack(str[start:end])
          _v18 = _v17.stamp
          _x = _v18
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v17.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v17.frame_id = str[start:end]
          _v19 = val2.vector
          _x = _v19
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.pos.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.vel = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3Stamped()
          _v20 = val2.header
          start = end
          end += 4
          (_v20.seq,) = _get_struct_I().unpack(str[start:end])
          _v21 = _v20.stamp
          _x = _v21
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v20.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v20.frame_id = str[start:end]
          _v22 = val2.vector
          _x = _v22
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.vel.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.acc = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3Stamped()
          _v23 = val2.header
          start = end
          end += 4
          (_v23.seq,) = _get_struct_I().unpack(str[start:end])
          _v24 = _v23.stamp
          _x = _v24
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v23.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v23.frame_id = str[start:end]
          _v25 = val2.vector
          _x = _v25
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.acc.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.jerk = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3Stamped()
          _v26 = val2.header
          start = end
          end += 4
          (_v26.seq,) = _get_struct_I().unpack(str[start:end])
          _v27 = _v26.stamp
          _x = _v27
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v26.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v26.frame_id = str[start:end]
          _v28 = val2.vector
          _x = _v28
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.jerk.append(val2)
        self.trajectories.append(val1)
      start = end
      end += 1
      (self.converged,) = _get_struct_B().unpack(str[start:end])
      self.converged = bool(self.converged)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories:
        _v29 = val1.header
        _x = _v29.seq
        buff.write(_get_struct_I().pack(_x))
        _v30 = _v29.stamp
        _x = _v30
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v29.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.pos)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pos:
          _v31 = val2.header
          _x = _v31.seq
          buff.write(_get_struct_I().pack(_x))
          _v32 = _v31.stamp
          _x = _v32
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v31.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v33 = val2.vector
          _x = _v33
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.vel)
        buff.write(_struct_I.pack(length))
        for val2 in val1.vel:
          _v34 = val2.header
          _x = _v34.seq
          buff.write(_get_struct_I().pack(_x))
          _v35 = _v34.stamp
          _x = _v35
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v34.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v36 = val2.vector
          _x = _v36
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.acc)
        buff.write(_struct_I.pack(length))
        for val2 in val1.acc:
          _v37 = val2.header
          _x = _v37.seq
          buff.write(_get_struct_I().pack(_x))
          _v38 = _v37.stamp
          _x = _v38
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v37.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v39 = val2.vector
          _x = _v39
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.jerk)
        buff.write(_struct_I.pack(length))
        for val2 in val1.jerk:
          _v40 = val2.header
          _x = _v40.seq
          buff.write(_get_struct_I().pack(_x))
          _v41 = _v40.stamp
          _x = _v41
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v40.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v42 = val2.vector
          _x = _v42
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.converged
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectories is None:
        self.trajectories = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories = []
      for i in range(0, length):
        val1 = acl_msgs.msg.Trajectory()
        _v43 = val1.header
        start = end
        end += 4
        (_v43.seq,) = _get_struct_I().unpack(str[start:end])
        _v44 = _v43.stamp
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v43.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v43.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pos = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3Stamped()
          _v45 = val2.header
          start = end
          end += 4
          (_v45.seq,) = _get_struct_I().unpack(str[start:end])
          _v46 = _v45.stamp
          _x = _v46
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v45.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v45.frame_id = str[start:end]
          _v47 = val2.vector
          _x = _v47
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.pos.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.vel = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3Stamped()
          _v48 = val2.header
          start = end
          end += 4
          (_v48.seq,) = _get_struct_I().unpack(str[start:end])
          _v49 = _v48.stamp
          _x = _v49
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v48.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v48.frame_id = str[start:end]
          _v50 = val2.vector
          _x = _v50
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.vel.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.acc = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3Stamped()
          _v51 = val2.header
          start = end
          end += 4
          (_v51.seq,) = _get_struct_I().unpack(str[start:end])
          _v52 = _v51.stamp
          _x = _v52
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v51.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v51.frame_id = str[start:end]
          _v53 = val2.vector
          _x = _v53
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.acc.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.jerk = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3Stamped()
          _v54 = val2.header
          start = end
          end += 4
          (_v54.seq,) = _get_struct_I().unpack(str[start:end])
          _v55 = _v54.stamp
          _x = _v55
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v54.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v54.frame_id = str[start:end]
          _v56 = val2.vector
          _x = _v56
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.jerk.append(val2)
        self.trajectories.append(val1)
      start = end
      end += 1
      (self.converged,) = _get_struct_B().unpack(str[start:end])
      self.converged = bool(self.converged)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class GenPath(object):
  _type          = 'acl_msgs/GenPath'
  _md5sum = '7a3e50543d6de9d6311088a4d374c49c'
  _request_class  = GenPathRequest
  _response_class = GenPathResponse
