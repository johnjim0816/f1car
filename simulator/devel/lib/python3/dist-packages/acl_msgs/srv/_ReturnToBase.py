# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/ReturnToBaseRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ReturnToBaseRequest(genpy.Message):
  _md5sum = "d15a6b6e904d469947ea4172e4a7788c"
  _type = "acl_msgs/ReturnToBaseRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose pose_init
geometry_msgs/Twist twist_init
geometry_msgs/Pose pose_goal
geometry_msgs/Twist twist_goal

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['pose_init','twist_init','pose_goal','twist_goal']
  _slot_types = ['geometry_msgs/Pose','geometry_msgs/Twist','geometry_msgs/Pose','geometry_msgs/Twist']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose_init,twist_init,pose_goal,twist_goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReturnToBaseRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pose_init is None:
        self.pose_init = geometry_msgs.msg.Pose()
      if self.twist_init is None:
        self.twist_init = geometry_msgs.msg.Twist()
      if self.pose_goal is None:
        self.pose_goal = geometry_msgs.msg.Pose()
      if self.twist_goal is None:
        self.twist_goal = geometry_msgs.msg.Twist()
    else:
      self.pose_init = geometry_msgs.msg.Pose()
      self.twist_init = geometry_msgs.msg.Twist()
      self.pose_goal = geometry_msgs.msg.Pose()
      self.twist_goal = geometry_msgs.msg.Twist()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_26d().pack(_x.pose_init.position.x, _x.pose_init.position.y, _x.pose_init.position.z, _x.pose_init.orientation.x, _x.pose_init.orientation.y, _x.pose_init.orientation.z, _x.pose_init.orientation.w, _x.twist_init.linear.x, _x.twist_init.linear.y, _x.twist_init.linear.z, _x.twist_init.angular.x, _x.twist_init.angular.y, _x.twist_init.angular.z, _x.pose_goal.position.x, _x.pose_goal.position.y, _x.pose_goal.position.z, _x.pose_goal.orientation.x, _x.pose_goal.orientation.y, _x.pose_goal.orientation.z, _x.pose_goal.orientation.w, _x.twist_goal.linear.x, _x.twist_goal.linear.y, _x.twist_goal.linear.z, _x.twist_goal.angular.x, _x.twist_goal.angular.y, _x.twist_goal.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose_init is None:
        self.pose_init = geometry_msgs.msg.Pose()
      if self.twist_init is None:
        self.twist_init = geometry_msgs.msg.Twist()
      if self.pose_goal is None:
        self.pose_goal = geometry_msgs.msg.Pose()
      if self.twist_goal is None:
        self.twist_goal = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 208
      (_x.pose_init.position.x, _x.pose_init.position.y, _x.pose_init.position.z, _x.pose_init.orientation.x, _x.pose_init.orientation.y, _x.pose_init.orientation.z, _x.pose_init.orientation.w, _x.twist_init.linear.x, _x.twist_init.linear.y, _x.twist_init.linear.z, _x.twist_init.angular.x, _x.twist_init.angular.y, _x.twist_init.angular.z, _x.pose_goal.position.x, _x.pose_goal.position.y, _x.pose_goal.position.z, _x.pose_goal.orientation.x, _x.pose_goal.orientation.y, _x.pose_goal.orientation.z, _x.pose_goal.orientation.w, _x.twist_goal.linear.x, _x.twist_goal.linear.y, _x.twist_goal.linear.z, _x.twist_goal.angular.x, _x.twist_goal.angular.y, _x.twist_goal.angular.z,) = _get_struct_26d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_26d().pack(_x.pose_init.position.x, _x.pose_init.position.y, _x.pose_init.position.z, _x.pose_init.orientation.x, _x.pose_init.orientation.y, _x.pose_init.orientation.z, _x.pose_init.orientation.w, _x.twist_init.linear.x, _x.twist_init.linear.y, _x.twist_init.linear.z, _x.twist_init.angular.x, _x.twist_init.angular.y, _x.twist_init.angular.z, _x.pose_goal.position.x, _x.pose_goal.position.y, _x.pose_goal.position.z, _x.pose_goal.orientation.x, _x.pose_goal.orientation.y, _x.pose_goal.orientation.z, _x.pose_goal.orientation.w, _x.twist_goal.linear.x, _x.twist_goal.linear.y, _x.twist_goal.linear.z, _x.twist_goal.angular.x, _x.twist_goal.angular.y, _x.twist_goal.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose_init is None:
        self.pose_init = geometry_msgs.msg.Pose()
      if self.twist_init is None:
        self.twist_init = geometry_msgs.msg.Twist()
      if self.pose_goal is None:
        self.pose_goal = geometry_msgs.msg.Pose()
      if self.twist_goal is None:
        self.twist_goal = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 208
      (_x.pose_init.position.x, _x.pose_init.position.y, _x.pose_init.position.z, _x.pose_init.orientation.x, _x.pose_init.orientation.y, _x.pose_init.orientation.z, _x.pose_init.orientation.w, _x.twist_init.linear.x, _x.twist_init.linear.y, _x.twist_init.linear.z, _x.twist_init.angular.x, _x.twist_init.angular.y, _x.twist_init.angular.z, _x.pose_goal.position.x, _x.pose_goal.position.y, _x.pose_goal.position.z, _x.pose_goal.orientation.x, _x.pose_goal.orientation.y, _x.pose_goal.orientation.z, _x.pose_goal.orientation.w, _x.twist_goal.linear.x, _x.twist_goal.linear.y, _x.twist_goal.linear.z, _x.twist_goal.angular.x, _x.twist_goal.angular.y, _x.twist_goal.angular.z,) = _get_struct_26d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_26d = None
def _get_struct_26d():
    global _struct_26d
    if _struct_26d is None:
        _struct_26d = struct.Struct("<26d")
    return _struct_26d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from acl_msgs/ReturnToBaseResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ReturnToBaseResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "acl_msgs/ReturnToBaseResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReturnToBaseResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ReturnToBase(object):
  _type          = 'acl_msgs/ReturnToBase'
  _md5sum = 'c32c7657daad0d7f97bac883e5e34a75'
  _request_class  = ReturnToBaseRequest
  _response_class = ReturnToBaseResponse
